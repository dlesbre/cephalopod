// reduction_fsm (autogenerated by Stately)

cload "ste.fl";

ENUM "reduction_fsm_state"
    [ "DONE"
    , "ALLOC"
    , "ALLOCATE"
    , "BEGIN"
    , "COMB"
    , "DECODE"
    , "DONE_ALLOCATE"
    , "DONE_POP_ARGS"
    , "DONE_WRITEBACK_ALLOC"
    , "DONE_WRITEBACK_REDEX"
    , "ERROR_STACK"
    , "HANDLE_APPLY"
    , "HANDLE_FN"
    , "HANDLE_SWAP"
    , "IDLE"
    , "INEFFICIENT"
    , "NEXT_ALLOC"
    , "NEXT_ARG"
    , "NEXT_WBA"
    , "POP"
    , "POP_ARGS"
    , "PRE_ALLOC"
    , "PRE_COMB"
    , "PRE_POP"
    , "PRE_PRIM"
    , "PRE_PUSH_NODE"
    , "PRE_READ_GP"
    , "PRE_SWAP_POP"
    , "PRE_SWAP_WB"
    , "PRE_WBA"
    , "PRE_WBR"
    , "PRIM"
    , "PUSH_NODE"
    , "READ_GP"
    , "REDUCTION_DONE"
    , "SWAP_DONE"
    , "SWAP_LEFT"
    , "SWAP_POP"
    , "SWAP_WB"
    , "WAIT_ALLOC"
    , "WAIT_COMB"
    , "WAIT_POP"
    , "WAIT_PRIM"
    , "WAIT_PUSH_NODE"
    , "WAIT_READ_GP"
    , "WAIT_SWAP_POP"
    , "WAIT_SWAP_WB"
    , "WAIT_WBA"
    , "WAIT_WBR"
    , "WALK_SPINE"
    , "WBA"
    , "WBR"
    , "WRITEBACK_ALLOC"
    , "WRITEBACK_REDEX"
    ];

let reduction_fsm =
    // clock
    bit_input clk.
    // inputs
    bit_input reset.
    bit_input arity_zero.
    bit_input comb_ack.
    bit_input empty_stack.
    bit_input is_apply.
    bit_input is_comb.
    bit_input is_prim.
    bit_input jmp.
    bit_input last_alloc.
    bit_input last_arg.
    bit_input mem_alloc_ack.
    bit_input mem_rw_ack.
    bit_input no_alloc.
    bit_input prim_ack.
    bit_input reducto.
    bit_input should_overwrite_redex.
    bit_input stack_ack.
    bit_input stack_nack.
    // outputs
    bit_output between_jobs.
    bit_output comb_req.
    bit_output dec_alloc_idx.
    bit_output evaluation_done.
    bit_output fetch.
    bit_output go_left.
    bit_output inc_arg_idx.
    bit_output load_alloc_addr.
    bit_output load_alloc_idx.
    bit_output load_comb_results.
    bit_output load_node_data.
    bit_output load_pop_arg.
    bit_output load_pop_gp.
    bit_output load_prim_results.
    bit_output load_swap_left.
    bit_output load_swap_right.
    bit_output mem_alloc_req.
    bit_output mem_read_req.
    bit_output mem_write_req.
    bit_output prim_req.
    bit_output put_alloc_addr.
    bit_output put_alloc_data.
    bit_output put_gp_addr.
    bit_output put_redex_data.
    bit_output put_swap_data.
    bit_output reset_arg_idx.
    bit_output stack_pop_req.
    bit_output stack_push_req.
    // internals
    // state
    reduction_fsm_state_internal state.
    CELL "draw_hier reduction_fsm"
        [ Moore_FSM "reduction_fsm_moore" clk state (reset, IDLE)
              [ DONE --- (jmp '&' reducto '&' mem_rw_ack) --- WAIT_READ_GP
              , DONE --- (jmp '&' reducto '&' ('~' mem_rw_ack)) --- READ_GP
              , DONE --- (jmp '&' ('~' reducto)) --- IDLE
              , ALLOC --- (mem_alloc_ack '&' last_alloc '&' is_comb '&' comb_ack) --- WAIT_COMB
              , ALLOC --- (mem_alloc_ack '&' last_alloc '&' is_comb '&' ('~' comb_ack)) --- COMB
              , ALLOC --- (mem_alloc_ack '&' last_alloc '&' ('~' is_comb) '&' prim_ack) --- WAIT_PRIM
              , ALLOC --- (mem_alloc_ack '&' last_alloc '&' ('~' is_comb) '&' ('~' prim_ack)) --- PRIM
              , ALLOC --- (mem_alloc_ack '&' ('~' last_alloc) '&' mem_alloc_ack) --- WAIT_ALLOC
              , ALLOC --- (mem_alloc_ack '&' ('~' last_alloc) '&' ('~' mem_alloc_ack)) --- ALLOC
              , COMB --- comb_ack --- INEFFICIENT
              , IDLE --- (reducto '&' mem_rw_ack) --- WAIT_READ_GP
              , IDLE --- (reducto '&' ('~' mem_rw_ack)) --- READ_GP
              , IDLE --- ('~' reducto) --- IDLE
              , INEFFICIENT --- (no_alloc '&' should_overwrite_redex '&' mem_rw_ack) --- WAIT_WBR
              , INEFFICIENT --- (no_alloc '&' should_overwrite_redex '&' ('~' mem_rw_ack)) --- WBR
              , INEFFICIENT --- (no_alloc '&' ('~' should_overwrite_redex) '&' reducto '&' mem_rw_ack) --- WAIT_READ_GP
              , INEFFICIENT --- (no_alloc '&' ('~' should_overwrite_redex) '&' reducto '&' ('~' mem_rw_ack)) --- READ_GP
              , INEFFICIENT --- (no_alloc '&' ('~' should_overwrite_redex) '&' ('~' reducto)) --- IDLE
              , INEFFICIENT --- (('~' no_alloc) '&' mem_rw_ack) --- WAIT_WBA
              , INEFFICIENT --- (('~' no_alloc) '&' ('~' mem_rw_ack)) --- WBA
              , POP --- stack_nack --- ERROR_STACK
              , POP --- (('~' stack_nack) '&' stack_ack '&' last_arg '&' no_alloc '&' is_comb '&' comb_ack) --- WAIT_COMB
              , POP --- (('~' stack_nack) '&' stack_ack '&' last_arg '&' no_alloc '&' is_comb '&' ('~' comb_ack)) --- COMB
              , POP --- (('~' stack_nack) '&' stack_ack '&' last_arg '&' no_alloc '&' ('~' is_comb) '&' prim_ack) --- WAIT_PRIM
              , POP --- (('~' stack_nack) '&' stack_ack '&' last_arg '&' no_alloc '&' ('~' is_comb) '&' ('~' prim_ack)) --- PRIM
              , POP --- (('~' stack_nack) '&' stack_ack '&' last_arg '&' ('~' no_alloc) '&' mem_alloc_ack) --- WAIT_ALLOC
              , POP --- (('~' stack_nack) '&' stack_ack '&' last_arg '&' ('~' no_alloc) '&' ('~' mem_alloc_ack)) --- ALLOC
              , POP --- (('~' stack_nack) '&' stack_ack '&' ('~' last_arg) '&' stack_ack) --- WAIT_POP
              , POP --- (('~' stack_nack) '&' stack_ack '&' ('~' last_arg) '&' ('~' stack_ack)) --- POP
              , PRIM --- prim_ack --- INEFFICIENT
              , PUSH_NODE --- (stack_ack '&' mem_rw_ack) --- WAIT_READ_GP
              , PUSH_NODE --- (stack_ack '&' ('~' mem_rw_ack)) --- READ_GP
              , READ_GP --- (mem_rw_ack '&' is_apply '&' stack_ack) --- WAIT_PUSH_NODE
              , READ_GP --- (mem_rw_ack '&' is_apply '&' ('~' stack_ack)) --- PUSH_NODE
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' arity_zero '&' no_alloc '&' is_comb '&' comb_ack) --- WAIT_COMB
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' arity_zero '&' no_alloc '&' is_comb '&' ('~' comb_ack)) --- COMB
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' arity_zero '&' no_alloc '&' ('~' is_comb) '&' prim_ack) --- WAIT_PRIM
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' arity_zero '&' no_alloc '&' ('~' is_comb) '&' ('~' prim_ack)) --- PRIM
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' arity_zero '&' ('~' no_alloc) '&' mem_alloc_ack) --- WAIT_ALLOC
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' arity_zero '&' ('~' no_alloc) '&' ('~' mem_alloc_ack)) --- ALLOC
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' ('~' arity_zero) '&' stack_ack) --- WAIT_POP
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' (is_comb '|' is_prim) '&' ('~' arity_zero) '&' ('~' stack_ack)) --- POP
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' ('~' (is_comb '|' is_prim)) '&' empty_stack) --- DONE
              , READ_GP --- (mem_rw_ack '&' ('~' is_apply) '&' ('~' (is_comb '|' is_prim)) '&' ('~' empty_stack)) --- SWAP_LEFT
              , SWAP_LEFT --- stack_ack --- WAIT_SWAP_POP
              , SWAP_LEFT --- ('~' stack_ack) --- SWAP_POP
              , SWAP_POP --- stack_nack --- ERROR_STACK
              , SWAP_POP --- (('~' stack_nack) '&' stack_ack '&' mem_rw_ack) --- WAIT_SWAP_WB
              , SWAP_POP --- (('~' stack_nack) '&' stack_ack '&' ('~' mem_rw_ack)) --- SWAP_WB
              , SWAP_WB --- (mem_rw_ack '&' reducto '&' mem_rw_ack) --- WAIT_READ_GP
              , SWAP_WB --- (mem_rw_ack '&' reducto '&' ('~' mem_rw_ack)) --- READ_GP
              , SWAP_WB --- (mem_rw_ack '&' ('~' reducto)) --- IDLE
              , WAIT_ALLOC --- mem_alloc_ack --- WAIT_ALLOC
              , WAIT_ALLOC --- ('~' mem_alloc_ack) --- ALLOC
              , WAIT_COMB --- comb_ack --- WAIT_COMB
              , WAIT_COMB --- ('~' comb_ack) --- COMB
              , WAIT_POP --- stack_ack --- WAIT_POP
              , WAIT_POP --- ('~' stack_ack) --- POP
              , WAIT_PRIM --- prim_ack --- WAIT_PRIM
              , WAIT_PRIM --- ('~' prim_ack) --- PRIM
              , WAIT_PUSH_NODE --- stack_ack --- WAIT_PUSH_NODE
              , WAIT_PUSH_NODE --- ('~' stack_ack) --- PUSH_NODE
              , WAIT_READ_GP --- mem_rw_ack --- WAIT_READ_GP
              , WAIT_READ_GP --- ('~' mem_rw_ack) --- READ_GP
              , WAIT_SWAP_POP --- stack_ack --- WAIT_SWAP_POP
              , WAIT_SWAP_POP --- ('~' stack_ack) --- SWAP_POP
              , WAIT_SWAP_WB --- mem_rw_ack --- WAIT_SWAP_WB
              , WAIT_SWAP_WB --- ('~' mem_rw_ack) --- SWAP_WB
              , WAIT_WBA --- mem_rw_ack --- WAIT_WBA
              , WAIT_WBA --- ('~' mem_rw_ack) --- WBA
              , WAIT_WBR --- mem_rw_ack --- WAIT_WBR
              , WAIT_WBR --- ('~' mem_rw_ack) --- WBR
              , WBA --- (mem_rw_ack '&' last_alloc '&' should_overwrite_redex '&' mem_rw_ack) --- WAIT_WBR
              , WBA --- (mem_rw_ack '&' last_alloc '&' should_overwrite_redex '&' ('~' mem_rw_ack)) --- WBR
              , WBA --- (mem_rw_ack '&' last_alloc '&' ('~' should_overwrite_redex) '&' reducto '&' mem_rw_ack) --- WAIT_READ_GP
              , WBA --- (mem_rw_ack '&' last_alloc '&' ('~' should_overwrite_redex) '&' reducto '&' ('~' mem_rw_ack)) --- READ_GP
              , WBA --- (mem_rw_ack '&' last_alloc '&' ('~' should_overwrite_redex) '&' ('~' reducto)) --- IDLE
              , WBA --- (mem_rw_ack '&' ('~' last_alloc) '&' mem_rw_ack) --- WAIT_WBA
              , WBA --- (mem_rw_ack '&' ('~' last_alloc) '&' ('~' mem_rw_ack)) --- WBA
              , WBR --- (mem_rw_ack '&' reducto '&' mem_rw_ack) --- WAIT_READ_GP
              , WBR --- (mem_rw_ack '&' reducto '&' ('~' mem_rw_ack)) --- READ_GP
              , WBR --- (mem_rw_ack '&' ('~' reducto)) --- IDLE
              ]
        , between_jobs <- (((is_DONE state) '&' (jmp '&' ('~' reducto))) '|' ((is_IDLE state) '&' ('~' reducto)) '|' ((is_INEFFICIENT state) '&' (no_alloc '&' ('~' should_overwrite_redex) '&' ('~' reducto))) '|' ((is_SWAP_WB state) '&' (mem_rw_ack '&' ('~' reducto))) '|' ((is_WBA state) '&' (mem_rw_ack '&' last_alloc '&' ('~' should_overwrite_redex) '&' ('~' reducto))) '|' ((is_WBR state) '&' (mem_rw_ack '&' ('~' reducto))))
        , put_alloc_data <- (is_WBA state)
        , dec_alloc_idx <- (((is_ALLOC state) '&' mem_alloc_ack) '|' ((is_WBA state) '&' mem_rw_ack))
        , prim_req <- (is_PRIM state)
        , load_node_data <- ((is_READ_GP state) '&' mem_rw_ack)
        , inc_arg_idx <- ((is_POP state) '&' (('~' stack_nack) '&' stack_ack))
        , mem_read_req <- (is_READ_GP state)
        , load_prim_results <- ((is_PRIM state) '&' prim_ack)
        , evaluation_done <- (is_DONE state)
        , mem_write_req <- ((is_SWAP_WB state) '|' (is_WBA state) '|' (is_WBR state))
        , load_swap_left <- (is_SWAP_LEFT state)
        , load_swap_right <- ((is_SWAP_POP state) '&' (('~' stack_nack) '&' stack_ack))
        , stack_pop_req <- ((is_POP state) '|' (is_SWAP_POP state))
        , mem_alloc_req <- (is_ALLOC state)
        , load_comb_results <- ((is_COMB state) '&' comb_ack)
        , reset_arg_idx <- ((is_READ_GP state) '&' mem_rw_ack)
        , load_alloc_addr <- ((is_ALLOC state) '&' mem_alloc_ack)
        , fetch <- (((is_DONE state) '&' (jmp '&' reducto)) '|' ((is_IDLE state) '&' reducto) '|' ((is_INEFFICIENT state) '&' (no_alloc '&' ('~' should_overwrite_redex) '&' reducto)) '|' ((is_PUSH_NODE state) '&' stack_ack) '|' ((is_SWAP_WB state) '&' (mem_rw_ack '&' reducto)) '|' ((is_WBA state) '&' (mem_rw_ack '&' last_alloc '&' ('~' should_overwrite_redex) '&' reducto)) '|' ((is_WBR state) '&' (mem_rw_ack '&' reducto)))
        , put_alloc_addr <- (is_WBA state)
        , put_redex_data <- (is_WBR state)
        , go_left <- ((is_PUSH_NODE state) '&' stack_ack)
        , load_alloc_idx <- ((is_INEFFICIENT state) '|' ((is_READ_GP state) '&' mem_rw_ack))
        , stack_push_req <- (is_PUSH_NODE state)
        , load_pop_gp <- (((is_POP state) '&' (('~' stack_nack) '&' stack_ack)) '|' ((is_SWAP_POP state) '&' (('~' stack_nack) '&' stack_ack)))
        , put_swap_data <- (is_SWAP_WB state)
        , put_gp_addr <- ((is_READ_GP state) '|' (is_SWAP_WB state) '|' (is_WBR state))
        , comb_req <- (is_COMB state)
        , load_pop_arg <- ((is_POP state) '&' (('~' stack_nack) '&' stack_ack))
        ];

