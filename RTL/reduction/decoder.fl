cload (DIR^"combinator_list.fl");

let primitive_list = [
	// Name	    Args    Allocs
	(P_PLUS,        2,      0),
	(P_MINUS,       2,      0),
	(P_TIMES,       2,      0),
	(P_DIVMOD,      3,      0),
	(P_EQ,	        2,      0),
	(P_NEQ,	        2,      0),
	(P_GT,	        2,      0),
	(P_GEQ,	        2,      0),
	(P_AND,	        2,      0),
	(P_OR,	        2,      0),
	(P_NOT,	        1,      0),
	(P_COND,	3,      0),	// cond then_expr else_expr
	(P_PROC_INIT,   5,      0)	// slot mask timeout expr world_env
];

let decoder =
    node_input		nd.
    bit_output		is_comb.
    bit_output		is_prim.
    bit_output		is_apply.
    bit_output		is_cons.
    bit_output		is_nil.
    addr_output		left.
    addr_output		right.
    arg_cnt_output	arity.
    alloc_cnt_output	to_alloc.
    combinator_output   nd_comb.
    prims_output        nd_prim.
    //
    arg_cnt_internal	comb_arity.
    arg_cnt_internal	prim_arity.
    alloc_cnt_internal	comb_to_alloc.
    alloc_cnt_internal  prim_to_alloc.
    internal		cur_comb cur_prim.
    //
    CELL "draw_hier decoder" [
	is_comb <- is_G_COMB  (nd-->type),
	is_prim <- is_G_PRIM  (nd-->type),
	is_apply <- is_G_APPL (nd-->type),
	is_cons <- is_G_CONS  (nd-->type),
	is_nil <- is_G_NIL    (nd-->type),
	//
	left <- (IF is_apply THEN (nd-->laddr) ELSE 'X),
	right <- (IF is_apply THEN (nd-->raddr) ELSE 'X),
	//
	CASE comb_arity
	    (map (\(c,ar,al,_). (cur_comb '=' c) --- ''ar) combinator_list) '0,
	CASE prim_arity
	    (map (\(p,ar,al). (cur_prim '=' p) --- ''ar) primitive_list) '0,
	CASE arity [
	    is_comb --- comb_arity,
	    is_prim --- prim_arity
	] '0,
	//
	cur_comb <- nd-->comb,
	cur_prim <- nd-->prim,
	CASE comb_to_alloc
	    (map (\(c,ar,al,_). (cur_comb '=' c) --- ''al) combinator_list) '0,
        CASE prim_to_alloc
            (map (\(p,ar,al). (cur_prim '=' p) --- ''al) primitive_list) '0,
	to_alloc <- (IF is_comb THEN comb_to_alloc ELSE (IF is_prim THEN prim_to_alloc ELSE '0)),
        //
        nd_comb <- (IF is_comb THEN (nd-->comb) ELSE 'X),
        nd_prim <- (IF is_prim THEN (nd-->prim) ELSE 'X)
];
