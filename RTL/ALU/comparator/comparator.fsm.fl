// comparator_manager (autogenerated by Stately)

cload "ste.fl";

ENUM "comparator_manager_state"
    [ "A_CHECK"
    , "A_PRE_READ"
    , "A_READ"
    , "A_WAIT_READ"
    , "B_CHECK"
    , "B_PRE_READ"
    , "B_READ"
    , "B_WAIT_READ"
    , "CHECK"
    , "DONE"
    , "IDLE"
    , "PRE_READ_A"
    , "PRE_READ_B"
    , "READ_A"
    , "READ_B"
    , "WAIT_READ_A"
    , "WAIT_READ_B"
    ];

let comparator_manager =
    // clock
    bit_input clk.
    // inputs
    bit_input reset.
    bit_input a_end.
    bit_input b_end.
    bit_input op_req.
    bit_input read_a_ack.
    bit_input read_b_ack.
    bit_input stop.
    // outputs
    bit_output flush.
    bit_output op_ack.
    bit_output read_a_req.
    bit_output read_b_req.
    // internals
    // state
    comparator_manager_state_internal state.
    CELL "draw_hier comparator_manager"
        [ Moore_FSM "comparator_manager_moore" clk state (reset, IDLE)
              [ A_READ --- (read_a_ack '&' a_end) --- DONE
              , A_READ --- (read_a_ack '&' ('~' a_end) '&' read_a_ack) --- A_WAIT_READ
              , A_READ --- (read_a_ack '&' ('~' a_end) '&' ('~' read_a_ack)) --- A_READ
              , A_WAIT_READ --- read_a_ack --- A_WAIT_READ
              , A_WAIT_READ --- ('~' read_a_ack) --- A_READ
              , B_READ --- (read_b_ack '&' b_end) --- DONE
              , B_READ --- (read_b_ack '&' ('~' b_end) '&' read_b_ack) --- B_WAIT_READ
              , B_READ --- (read_b_ack '&' ('~' b_end) '&' ('~' read_b_ack)) --- B_READ
              , B_WAIT_READ --- read_b_ack --- B_WAIT_READ
              , B_WAIT_READ --- ('~' read_b_ack) --- B_READ
              , DONE --- ('~' op_req) --- IDLE
              , IDLE --- (op_req '&' read_a_ack) --- WAIT_READ_A
              , IDLE --- (op_req '&' ('~' read_a_ack)) --- READ_A
              , READ_A --- (read_a_ack '&' read_b_ack) --- WAIT_READ_B
              , READ_A --- (read_a_ack '&' ('~' read_b_ack)) --- READ_B
              , READ_B --- (read_b_ack '&' (stop '|' (a_end '&' b_end))) --- DONE
              , READ_B --- (read_b_ack '&' ('~' (stop '|' (a_end '&' b_end))) '&' a_end '&' read_b_ack) --- B_WAIT_READ
              , READ_B --- (read_b_ack '&' ('~' (stop '|' (a_end '&' b_end))) '&' a_end '&' ('~' read_b_ack)) --- B_READ
              , READ_B --- (read_b_ack '&' ('~' (stop '|' (a_end '&' b_end))) '&' ('~' a_end) '&' b_end '&' read_a_ack) --- A_WAIT_READ
              , READ_B --- (read_b_ack '&' ('~' (stop '|' (a_end '&' b_end))) '&' ('~' a_end) '&' b_end '&' ('~' read_a_ack)) --- A_READ
              , READ_B --- (read_b_ack '&' ('~' (stop '|' (a_end '&' b_end))) '&' ('~' a_end) '&' ('~' b_end) '&' read_a_ack) --- WAIT_READ_A
              , READ_B --- (read_b_ack '&' ('~' (stop '|' (a_end '&' b_end))) '&' ('~' a_end) '&' ('~' b_end) '&' ('~' read_a_ack)) --- READ_A
              , WAIT_READ_A --- read_a_ack --- WAIT_READ_A
              , WAIT_READ_A --- ('~' read_a_ack) --- READ_A
              , WAIT_READ_B --- read_b_ack --- WAIT_READ_B
              , WAIT_READ_B --- ('~' read_b_ack) --- READ_B
              ]
        , read_b_req <- ((is_B_READ state) '|' (is_READ_B state))
        , op_ack <- (is_DONE state)
        , flush <- (is_IDLE state)
        , read_a_req <- ((is_A_READ state) '|' (is_READ_A state))
        ];

