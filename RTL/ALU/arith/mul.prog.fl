// multiplier (autogenerated)

cload "ste.fl";


ENUM "multiplier_state" [
    "S'MAIN'0",
    "S'MAIN'1",
    "S'MAIN'2",
    "S'MAIN'3",
    "S'MAIN'4",
    "S'MAIN'5",
    "S'MAIN'6",
    "S'MAIN'7",
    "DONE"
];


let multiplier_mem_alloc_fourphase = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input run.
    bit_output done.
    bit_input hold.
    addr_output ho'addr.
    bit_output req.
    bit_input ack.
    addr_input o'addr.
    // internal
    bit_internal latch.
    bit_internal was_ack.
    bit_internal still_done.
    CELL "draw_hier multiplier_mem_alloc_fourphase" [
        re_ff_en_mux clk latch o'addr ho'addr,
        re_ff_reset clk reset ack was_ack,
        re_ff_reset clk reset (done '&' hold) still_done,
        done <- (still_done '|' latch),
        latch <- (ack '&' ('~' was_ack)),
        req <- ((run '&' ('~' was_ack)) '&' (ack '|' ('~' done)))
    ];


let multiplier_mem_read_fourphase = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input run.
    bit_output done.
    bit_input hold.
    addr_input hi'addr.
    node_output ho'data.
    bit_output req.
    bit_input ack.
    addr_output i'addr.
    node_input o'data.
    // internal
    bit_internal latch.
    bit_internal was_ack.
    bit_internal still_done.
    CELL "draw_hier multiplier_mem_read_fourphase" [
        re_ff_en_mux clk latch o'data ho'data,
        re_ff_reset clk reset ack was_ack,
        re_ff_reset clk reset (done '&' hold) still_done,
        done <- (still_done '|' latch),
        i'addr <- hi'addr,
        latch <- (ack '&' ('~' was_ack)),
        req <- ((run '&' ('~' was_ack)) '&' (ack '|' ('~' done)))
    ];


let multiplier_mem_write_fourphase = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input run.
    bit_output done.
    bit_input hold.
    addr_input hi'addr.
    node_input hi'data.
    bit_output req.
    bit_input ack.
    addr_output i'addr.
    node_output i'data.
    // internal
    bit_internal latch.
    bit_internal was_ack.
    bit_internal still_done.
    CELL "draw_hier multiplier_mem_write_fourphase" [
        re_ff_reset clk reset ack was_ack,
        re_ff_reset clk reset (done '&' hold) still_done,
        done <- (still_done '|' latch),
        i'addr <- hi'addr,
        i'data <- hi'data,
        latch <- (ack '&' ('~' was_ack)),
        req <- ((run '&' ('~' was_ack)) '&' (ack '|' ('~' done)))
    ];


let multiplier = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input req.
    bit_output ack.
    op_input i'opcode.
    bit_output a'mem_alloc'req.
    bit_input a'mem_alloc'ack.
    addr_input a'mem_alloc'o'addr.
    bit_output a'mem_read'req.
    bit_input a'mem_read'ack.
    addr_output a'mem_read'i'addr.
    node_input a'mem_read'o'data.
    bit_output a'mem_write'req.
    bit_input a'mem_write'ack.
    addr_output a'mem_write'i'addr.
    node_output a'mem_write'i'data.
    // internal
    bit_internal eclk.
    bit_internal ereset.
    bit_internal advance.
    bit_internal hold.
    bit_internal running.
    bit_internal update.
    bit_internal not'done.
    bit_internal not'initial.
    bit_internal initial.
    multiplier_state_internal state.
    bit_internal a'mem_alloc'want.
    bit_internal a'mem_alloc'done.
    addr_internal a'mem_alloc'ho'addr.
    bit_internal a'mem_alloc'run.
    bit_internal a'mem_read'want.
    bit_internal a'mem_read'done.
    addr_internal a'mem_read'hi'addr.
    node_internal a'mem_read'ho'data.
    bit_internal a'mem_read'run.
    bit_internal a'mem_write'want.
    bit_internal a'mem_write'done.
    addr_internal a'mem_write'hi'addr.
    node_internal a'mem_write'hi'data.
    bit_internal a'mem_write'run.
    bit_internal l'main'a_end.
    addr_internal l'main'addr_a_cur.
    addr_internal l'main'addr_b_cur.
    addr_internal l'main'addr_res_cur.
    addr_internal l'main'addr_res_offset.
    bit_internal l'main'b_end.
    Int_internal l'main'carry_int.
    bit_internal l'main'initial.
    node_internal l'main'node_a.
    node_internal l'main'node_b.
    node_internal l'main'node_res.
    op_internal l'main'opcode.
    op_internal tmp'l'main'opcode.
    bit_internal l'main'res_end.
    bit_internal l'main'unset.
    multiplier_state_internal ret'main.
    multiplier_state_internal tmp'ret'main.
    bit_internal s'2.
    addr_internal s'3.
    bit_internal s'4.
    dInt_internal s'11.
    Int_internal s'12.
    node_internal s'14.
    bit_internal s'16.
    addr_internal s'18.
    CELL "draw_hier multiplier" [
        multiplier_mem_alloc_fourphase eclk ereset a'mem_alloc'run a'mem_alloc'done hold a'mem_alloc'ho'addr a'mem_alloc'req a'mem_alloc'ack a'mem_alloc'o'addr,
        multiplier_mem_read_fourphase eclk ereset a'mem_read'run a'mem_read'done hold a'mem_read'hi'addr a'mem_read'ho'data a'mem_read'req a'mem_read'ack a'mem_read'i'addr a'mem_read'o'data,
        multiplier_mem_write_fourphase eclk ereset a'mem_write'run a'mem_write'done hold a'mem_write'hi'addr a'mem_write'hi'data a'mem_write'req a'mem_write'ack a'mem_write'i'addr a'mem_write'i'data,
        re_ff_reset eclk ereset ((not'initial '&' not'done) '|' update) not'initial,
        re_ff_en_reset eclk (update '|' ((state '=' DONE) '&' ('~' req))) ereset ((({(SX ({(state '=' S'MAIN'5)::bit}))::multiplier_state}) '&' (IF ('~' l'main'a_end) THEN S'MAIN'1 ELSE ret'main)) '|' ((({(SX ({(state '=' S'MAIN'6)::bit}))::multiplier_state}) '&' (IF ((a'mem_read'ho'data-->laddr) '=' ({({(addr_end)::addr})::addr})) THEN S'MAIN'7 ELSE S'MAIN'4)) '|' ((({(SX ({(state '=' S'MAIN'2)::bit}))::multiplier_state}) '&' (IF l'main'initial THEN S'MAIN'3 ELSE S'MAIN'6)) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::multiplier_state}) '&' (IF s'16 THEN S'MAIN'2 ELSE S'MAIN'5)) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::multiplier_state}) '&' (IF s'2 THEN S'MAIN'1 ELSE ret'main)) '|' ((({(SX ({(state '=' S'MAIN'1)::bit}))::multiplier_state}) '&' (IF s'2 THEN S'MAIN'2 ELSE S'MAIN'5)) '|' ((({(SX ({(state '=' DONE)::bit}))::multiplier_state}) '&' S'MAIN'0) '|' (({(SX ({((state '=' S'MAIN'3) '|' (state '=' S'MAIN'7))::bit}))::multiplier_state}) '&' S'MAIN'4)))))))) state,
        re_ff_en eclk ((state '=' S'MAIN'1) '&' update) (({(SX ({(state '=' S'MAIN'1)::bit}))::bit}) '&' s'4) l'main'a_end,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN'1)) '&' update) ((({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' (l'main'opcode-->srcA)) '|' (({(SX ({(state '=' S'MAIN'1)::bit}))::addr}) '&' s'3)) l'main'addr_a_cur,
        re_ff_en eclk (((state '=' S'MAIN'1) '|' (state '=' S'MAIN'2)) '&' update) ((({(SX ({(state '=' S'MAIN'1)::bit}))::addr}) '&' (l'main'opcode-->srcB)) '|' (({(SX ({(state '=' S'MAIN'2)::bit}))::addr}) '&' s'3)) l'main'addr_b_cur,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' (state '=' S'MAIN'5))) '&' update) ((({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' (l'main'opcode-->dest)) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::addr}) '&' (s'14-->laddr)) '|' (({(SX ({(state '=' S'MAIN'5)::bit}))::addr}) '&' l'main'addr_res_offset))) l'main'addr_res_cur,
        re_ff_en eclk ((state '=' S'MAIN'4) '&' update) (({(SX ({(state '=' S'MAIN'4)::bit}))::addr}) '&' (IF l'main'unset THEN (l'main'node_res-->laddr) ELSE l'main'addr_res_offset)) l'main'addr_res_offset,
        re_ff_en eclk ((state '=' S'MAIN'2) '&' update) (({(SX ({(state '=' S'MAIN'2)::bit}))::bit}) '&' s'4) l'main'b_end,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'1) '|' (state '=' S'MAIN'4))) '&' update) ((({(SX ({(state '=' S'MAIN'4)::bit}))::Int}) '&' (IF s'16 THEN s'12 ELSE ({'0::Int}))) '|' (({(SX ({(state '=' S'MAIN'1)::bit}))::Int}) '&' (IF s'2 THEN l'main'carry_int ELSE ({'0::Int})))) l'main'carry_int,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN'5)) '&' update) ({(SX ({(state '=' S'MAIN'0)::bit}))::bit}) l'main'initial,
        re_ff_en eclk ((state '=' S'MAIN'1) '&' update) (({(SX ({(state '=' S'MAIN'1)::bit}))::node}) '&' a'mem_read'ho'data) l'main'node_a,
        re_ff_en eclk ((state '=' S'MAIN'2) '&' update) (({(SX ({(state '=' S'MAIN'2)::bit}))::node}) '&' a'mem_read'ho'data) l'main'node_b,
        re_ff_en eclk (((state '=' S'MAIN'1) '|' ((state '=' S'MAIN'3) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'6) '|' (state '=' S'MAIN'7))))) '&' update) ((({(SX ({(state '=' S'MAIN'4)::bit}))::node}) '&' (IF s'16 THEN s'14 ELSE ((s'14<--int ? s'12)<--laddr ? s'18))) '|' ((({(SX ({(state '=' S'MAIN'1)::bit}))::node}) '&' (IF s'2 THEN l'main'node_res ELSE ((l'main'node_res<--int ? l'main'carry_int)<--laddr ? s'18))) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::node}) '&' (l'main'node_res<--laddr ? a'mem_alloc'ho'addr)) '|' ((({(SX ({(state '=' S'MAIN'3)::bit}))::node}) '&' ((({'0::node})<--laddr ? a'mem_alloc'ho'addr)<--type ? ({({(G_INT)::g_type})::g_type}))) '|' (({(SX ({(state '=' S'MAIN'6)::bit}))::node}) '&' a'mem_read'ho'data))))) l'main'node_res,
        re_ff_en eclk (initial '&' update) (({(SX ({initial::bit}))::op}) '&' i'opcode) tmp'l'main'opcode,
        re_ff_en eclk (((state '=' S'MAIN'2) '|' (state '=' S'MAIN'7)) '&' update) ({(SX ({(state '=' S'MAIN'7)::bit}))::bit}) l'main'res_end,
        re_ff_en eclk (((state '=' S'MAIN'1) '|' (state '=' S'MAIN'4)) '&' update) ({(SX ({(state '=' S'MAIN'1)::bit}))::bit}) l'main'unset,
        re_ff_en eclk (initial '&' update) (({(SX ({initial::bit}))::multiplier_state}) '&' DONE) tmp'ret'main,
        a'mem_alloc'run <- a'mem_alloc'want,
        a'mem_alloc'want <- (running '&' ((state '=' S'MAIN'3) '|' (state '=' S'MAIN'7))),
        a'mem_read'hi'addr <- ((({(SX ({(state '=' S'MAIN'1)::bit}))::addr}) '&' l'main'addr_a_cur) '|' ((({(SX ({(state '=' S'MAIN'2)::bit}))::addr}) '&' l'main'addr_b_cur) '|' (({(SX ({(state '=' S'MAIN'6)::bit}))::addr}) '&' l'main'addr_res_cur))),
        a'mem_read'run <- a'mem_read'want,
        a'mem_read'want <- (running '&' ((state '=' S'MAIN'1) '|' ((state '=' S'MAIN'2) '|' (state '=' S'MAIN'6)))),
        a'mem_write'hi'addr <- (({(SX ({((state '=' S'MAIN'4) '|' (state '=' S'MAIN'5))::bit}))::addr}) '&' l'main'addr_res_cur),
        a'mem_write'hi'data <- ((({(SX ({(state '=' S'MAIN'5)::bit}))::node}) '&' l'main'node_res) '|' (({(SX ({(state '=' S'MAIN'4)::bit}))::node}) '&' s'14)),
        a'mem_write'run <- a'mem_write'want,
        a'mem_write'want <- (running '&' ((state '=' S'MAIN'4) '|' (state '=' S'MAIN'5))),
        ack <- (state '=' DONE),
        advance <- (running '&' ((('~' a'mem_alloc'want) '|' a'mem_alloc'done) '&' ((('~' a'mem_read'want) '|' a'mem_read'done) '&' (('~' a'mem_write'want) '|' a'mem_write'done)))),
        eclk <- clk,
        ereset <- reset,
        hold <- ('~' advance),
        initial <- ('~' not'initial),
        l'main'opcode <- (IF initial THEN i'opcode ELSE tmp'l'main'opcode),
        not'done <- ('~' (state '=' DONE)),
        ret'main <- (IF initial THEN DONE ELSE tmp'ret'main),
        running <- (req '&' not'done),
        s'11 <- (({'0::dInt})<--simple ? (((IF l'main'res_end THEN (({(\z. (SX z))::(Int->simple_dInt)}) (l'main'node_res-->int)) ELSE (({(\z. (ZX z))::(Int->simple_dInt)}) (l'main'node_res-->int))) '+' ((IF l'main'a_end THEN (({(\z. (SX z))::(Int->simple_dInt)}) (l'main'node_a-->int)) ELSE (({(\z. (ZX z))::(Int->simple_dInt)}) (l'main'node_a-->int))) '*' (IF l'main'b_end THEN (({(\z. (SX z))::(Int->simple_dInt)}) (l'main'node_b-->int)) ELSE (({(\z. (ZX z))::(Int->simple_dInt)}) (l'main'node_b-->int))))) '+' (IF l'main'a_end THEN (({(\z. (SX z))::(Int->simple_dInt)}) l'main'carry_int) ELSE (({(\z. (ZX z))::(Int->simple_dInt)}) l'main'carry_int)))),
        s'12 <- (s'11-->high),
        s'14 <- (l'main'node_res<--int ? (s'11-->low)),
        s'16 <- ('~' l'main'b_end),
        s'18 <- ({({(addr_end)::addr})::addr}),
        s'2 <- ('~' ({'0::bit})),
        s'3 <- (a'mem_read'ho'data-->laddr),
        s'4 <- (s'3 '=' ({({(addr_end)::addr})::addr})),
        update <- advance
    ];


let examine_multiplier = STE_debug (pexlif2fsm (multiplier 'clk 'reset 'req 'ack 'i'opcode 'a'mem_alloc'req 'a'mem_alloc'ack 'a'mem_alloc'o'addr 'a'mem_read'req 'a'mem_read'ack 'a'mem_read'i'addr 'a'mem_read'o'data 'a'mem_write'req 'a'mem_write'ack 'a'mem_write'i'addr 'a'mem_write'i'data))
