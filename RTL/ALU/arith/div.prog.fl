// divider (autogenerated)

cload "ste.fl";


ENUM "divider_state" [
    "S'MAIN'0",
    "S'MAIN'1",
    "S'MAIN'2",
    "S'MAIN'3",
    "S'MAIN'4",
    "S'MAIN'5",
    "S'MAIN'6",
    "S'MAIN'7",
    "S'MAIN'8",
    "S'MAIN'9",
    "S'MAIN'10",
    "S'MAIN'11",
    "S'MAIN'12",
    "S'MAIN'13",
    "S'MAIN'14",
    "S'MAIN'15",
    "S'MAIN'16",
    "S'MAIN'17",
    "S'MAIN_END_FLIP_Q'0",
    "S'MAIN_END_FLIP_Q'1",
    "S'MAIN_END_FLIP_R'0",
    "S'MAIN_END_FLIP_R'1",
    "S'MAIN_END_FLIP_R'2",
    "S'MAIN_FINAL_NODES'0",
    "S'MAIN_FINAL_NODES'1",
    "S'MAIN_FLIP_N'0",
    "S'MAIN_READ_D'0",
    "S'MAIN_READ_N'0",
    "S'MAIN_READ_N'1",
    "S'MAIN_ZERO_DIVISION'0",
    "DONE"
];


let divider_mem_alloc_fourphase = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input run.
    bit_output done.
    bit_input hold.
    addr_output ho'addr.
    bit_output req.
    bit_input ack.
    addr_input o'addr.
    // internal
    bit_internal latch.
    bit_internal was_ack.
    bit_internal still_done.
    CELL "draw_hier divider_mem_alloc_fourphase" [
        re_ff_en_mux clk latch o'addr ho'addr,
        re_ff_reset clk reset ack was_ack,
        re_ff_reset clk reset (done '&' hold) still_done,
        done <- (still_done '|' latch),
        latch <- (ack '&' ('~' was_ack)),
        req <- ((run '&' ('~' was_ack)) '&' (ack '|' ('~' done)))
    ];


let divider_mem_read_fourphase = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input run.
    bit_output done.
    bit_input hold.
    addr_input hi'addr.
    node_output ho'data.
    bit_output req.
    bit_input ack.
    addr_output i'addr.
    node_input o'data.
    // internal
    bit_internal latch.
    bit_internal was_ack.
    bit_internal still_done.
    CELL "draw_hier divider_mem_read_fourphase" [
        re_ff_en_mux clk latch o'data ho'data,
        re_ff_reset clk reset ack was_ack,
        re_ff_reset clk reset (done '&' hold) still_done,
        done <- (still_done '|' latch),
        i'addr <- hi'addr,
        latch <- (ack '&' ('~' was_ack)),
        req <- ((run '&' ('~' was_ack)) '&' (ack '|' ('~' done)))
    ];


let divider_mem_write_fourphase = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input run.
    bit_output done.
    bit_input hold.
    addr_input hi'addr.
    node_input hi'data.
    bit_output req.
    bit_input ack.
    addr_output i'addr.
    node_output i'data.
    // internal
    bit_internal latch.
    bit_internal was_ack.
    bit_internal still_done.
    CELL "draw_hier divider_mem_write_fourphase" [
        re_ff_reset clk reset ack was_ack,
        re_ff_reset clk reset (done '&' hold) still_done,
        done <- (still_done '|' latch),
        i'addr <- hi'addr,
        i'data <- hi'data,
        latch <- (ack '&' ('~' was_ack)),
        req <- ((run '&' ('~' was_ack)) '&' (ack '|' ('~' done)))
    ];


let divider = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input req.
    bit_output ack.
    op_input i'opcode.
    bit_output o'zero_division_error.
    addr_output o'addr_q.
    addr_output o'addr_r1.
    bit_output a'mem_alloc'req.
    bit_input a'mem_alloc'ack.
    addr_input a'mem_alloc'o'addr.
    bit_output a'mem_read'req.
    bit_input a'mem_read'ack.
    addr_output a'mem_read'i'addr.
    node_input a'mem_read'o'data.
    bit_output a'mem_write'req.
    bit_input a'mem_write'ack.
    addr_output a'mem_write'i'addr.
    node_output a'mem_write'i'data.
    // internal
    bit_internal eclk.
    bit_internal ereset.
    bit_internal advance.
    bit_internal hold.
    bit_internal running.
    bit_internal update.
    bit_internal not'done.
    bit_internal not'initial.
    bit_internal initial.
    divider_state_internal state.
    bit_internal a'mem_alloc'want.
    bit_internal a'mem_alloc'done.
    addr_internal a'mem_alloc'ho'addr.
    bit_internal a'mem_alloc'run.
    bit_internal a'mem_read'want.
    bit_internal a'mem_read'done.
    addr_internal a'mem_read'hi'addr.
    node_internal a'mem_read'ho'data.
    bit_internal a'mem_read'run.
    bit_internal a'mem_write'want.
    bit_internal a'mem_write'done.
    addr_internal a'mem_write'hi'addr.
    node_internal a'mem_write'hi'data.
    bit_internal a'mem_write'run.
    bit_internal l'main'add_q_carry.
    addr_internal l'main'addr_d_cur.
    addr_internal l'main'addr_f.
    addr_internal l'main'addr_n_cur.
    addr_internal l'main'addr_nr_cur.
    addr_internal l'main'addr_nr_next.
    addr_internal l'main'addr_nr_prev.
    addr_internal l'main'addr_q.
    addr_internal l'main'addr_q_cur.
    addr_internal l'main'addr_r1.
    addr_internal l'main'addr_r1_cur.
    addr_internal l'main'addr_r1_prev.
    addr_internal l'main'addr_r2.
    addr_internal l'main'addr_r2_cur.
    addr_internal l'main'addr_r2_prev.
    bit_internal l'main'd_is_negative.
    bit_internal l'main'flip_r_carry.
    Int_internal l'main'mask.
    bit_internal l'main'n_is_negative.
    bit_internal l'main'neg_d_carry.
    bit_internal l'main'neg_n_carry.
    bit_internal l'main'neg_q_carry.
    node_internal l'main'node_d.
    node_internal l'main'node_f.
    node_internal l'main'node_n.
    node_internal l'main'node_nr.
    node_internal l'main'node_q.
    node_internal l'main'node_r1.
    node_internal l'main'node_r2.
    op_internal l'main'opcode.
    op_internal tmp'l'main'opcode.
    bit_internal l'main'r1_is_0.
    bit_internal l'main'r2_is_0.
    bit_internal l'main'shift_carry.
    bit_internal l'main'short_d.
    bit_internal l'main'sub_carry.
    bit_internal l'main'zero_division_error.
    divider_state_internal ret'main.
    divider_state_internal tmp'ret'main.
    addr_internal s'0.
    addr_internal s'1.
    addr_internal s'2.
    g_type_internal s'3.
    node_internal s'4.
    bit_internal s'5.
    bit_internal s'6.
    bit_internal s'7.
    bit_internal s'8.
    node_internal s'10.
    bit_internal s'12.
    addr_internal s'16.
    node_internal s'17.
    bit_internal s'20.
    bit_internal s'21.
    eInt_internal s'22.
    node_internal s'25.
    bit_internal s'26.
    Int_internal s'27.
    Int_internal s'28.
    addr_internal s'29.
    bit_internal s'31.
    eInt_internal s'32.
    node_internal s'34.
    bit_internal s'35.
    eInt_internal s'37.
    Int_internal s'38.
    eInt_internal s'39.
    node_internal s'40.
    node_internal s'42.
    bit_internal s'43.
    bit_internal s'44.
    bit_internal s'45.
    bit_internal s'46.
    bit_internal s'47.
    bit_internal s'48.
    node_internal s'52.
    bit_internal s'53.
    bit_internal s'54.
    node_internal s'57.
    addr_internal s'58.
    bit_internal s'59.
    node_internal s'61.
    bit_internal s'65.
    eInt_internal s'66.
    Int_internal s'68.
    eInt_internal s'69.
    addr_internal s'73.
    node_internal s'76.
    bit_internal s'82.
    eInt_internal s'83.
    addr_internal s'87.
    addr_internal s'88.
    bit_internal s'89.
    Int_internal s'91.
    Int_internal s'94.
    Int_internal s'100.
    Int_internal s'101.
    bit_internal s'104.
    bit_internal s'106.
    bit_internal s'107.
    CELL "draw_hier divider" [
        divider_mem_alloc_fourphase eclk ereset a'mem_alloc'run a'mem_alloc'done hold a'mem_alloc'ho'addr a'mem_alloc'req a'mem_alloc'ack a'mem_alloc'o'addr,
        divider_mem_read_fourphase eclk ereset a'mem_read'run a'mem_read'done hold a'mem_read'hi'addr a'mem_read'ho'data a'mem_read'req a'mem_read'ack a'mem_read'i'addr a'mem_read'o'data,
        divider_mem_write_fourphase eclk ereset a'mem_write'run a'mem_write'done hold a'mem_write'hi'addr a'mem_write'hi'data a'mem_write'req a'mem_write'ack a'mem_write'i'addr a'mem_write'i'data,
        re_ff_reset eclk ereset ((not'initial '&' not'done) '|' update) not'initial,
        re_ff_en_reset eclk (update '|' ((state '=' DONE) '&' ('~' req))) ereset ((({(SX ({(state '=' S'MAIN_END_FLIP_Q'1)::bit}))::divider_state}) '&' (IF (s'73 '=' ({({(addr_end)::addr})::addr})) THEN S'MAIN_FINAL_NODES'0 ELSE S'MAIN_END_FLIP_Q'0)) '|' ((({(SX ({(state '=' S'MAIN'15)::bit}))::divider_state}) '&' (IF s'104 THEN S'MAIN_FINAL_NODES'0 ELSE S'MAIN'16)) '|' ((({(SX ({(state '=' S'MAIN_READ_D'0)::bit}))::divider_state}) '&' (IF s'107 THEN S'MAIN_ZERO_DIVISION'0 ELSE S'MAIN'1)) '|' ((({(SX ({(state '=' S'MAIN'1)::bit}))::divider_state}) '&' (IF s'12 THEN S'MAIN_READ_N'0 ELSE S'MAIN'15)) '|' ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::divider_state}) '&' (IF s'20 THEN (IF s'21 THEN S'MAIN_FLIP_N'0 ELSE (IF s'31 THEN S'MAIN'2 ELSE S'MAIN'4)) ELSE S'MAIN'14)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::divider_state}) '&' (IF s'26 THEN (IF s'31 THEN S'MAIN'2 ELSE S'MAIN'4) ELSE S'MAIN'12)) '|' ((({(SX ({((state '=' S'MAIN'9) '|' (state '=' S'MAIN'11))::bit}))::divider_state}) '&' (IF s'31 THEN S'MAIN'2 ELSE S'MAIN'4)) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::divider_state}) '&' (IF s'47 THEN S'MAIN'5 ELSE S'MAIN'10)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::divider_state}) '&' (IF s'53 THEN (IF s'54 THEN S'MAIN'6 ELSE S'MAIN'7) ELSE (IF s'31 THEN S'MAIN'3 ELSE S'MAIN'4))) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::divider_state}) '&' (IF s'59 THEN (IF l'main'short_d THEN S'MAIN'8 ELSE (IF s'65 THEN S'MAIN_END_FLIP_R'0 ELSE (IF s'82 THEN S'MAIN_END_FLIP_Q'0 ELSE S'MAIN_FINAL_NODES'0))) ELSE S'MAIN'9)) '|' ((({(SX ({(state '=' S'MAIN'8)::bit}))::divider_state}) '&' (IF s'65 THEN S'MAIN_END_FLIP_Q'0 ELSE (IF s'82 THEN S'MAIN_END_FLIP_Q'0 ELSE S'MAIN_FINAL_NODES'0))) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::divider_state}) '&' (IF s'8 THEN S'MAIN_ZERO_DIVISION'0 ELSE S'MAIN'1)) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_R'2)::bit}))::divider_state}) '&' (IF s'89 THEN S'MAIN_END_FLIP_Q'0 ELSE S'MAIN_END_FLIP_R'0)) '|' ((({(SX ({(state '=' S'MAIN'17)::bit}))::divider_state}) '&' (IF s'89 THEN S'MAIN_READ_N'0 ELSE S'MAIN_READ_D'0)) '|' ((({(SX ({(state '=' S'MAIN_ZERO_DIVISION'0)::bit}))::divider_state}) '&' ret'main) '|' ((({(SX ({(state '=' DONE)::bit}))::divider_state}) '&' S'MAIN'0) '|' ((({(SX ({(state '=' S'MAIN'10)::bit}))::divider_state}) '&' S'MAIN'11) '|' ((({(SX ({(state '=' S'MAIN'12)::bit}))::divider_state}) '&' S'MAIN'13) '|' ((({(SX ({(state '=' S'MAIN'16)::bit}))::divider_state}) '&' S'MAIN'17) '|' ((({(SX ({(state '=' S'MAIN'2)::bit}))::divider_state}) '&' S'MAIN'3) '|' ((({(SX ({(state '=' S'MAIN'3)::bit}))::divider_state}) '&' S'MAIN'4) '|' ((({(SX ({(state '=' S'MAIN'6)::bit}))::divider_state}) '&' S'MAIN'7) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_Q'0)::bit}))::divider_state}) '&' S'MAIN_END_FLIP_Q'1) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_R'0)::bit}))::divider_state}) '&' S'MAIN_END_FLIP_R'1) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_R'1)::bit}))::divider_state}) '&' S'MAIN_END_FLIP_R'2) '|' ((({(SX ({(state '=' S'MAIN_FINAL_NODES'0)::bit}))::divider_state}) '&' S'MAIN_FINAL_NODES'1) '|' ((({(SX ({(state '=' S'MAIN'13)::bit}))::divider_state}) '&' S'MAIN_FLIP_N'0) '|' ((({(SX ({(state '=' S'MAIN'14)::bit}))::divider_state}) '&' S'MAIN_READ_N'0) '|' ((({(SX ({(state '=' S'MAIN_READ_N'0)::bit}))::divider_state}) '&' S'MAIN_READ_N'1) '|' (({(SX ({(state '=' S'MAIN_FINAL_NODES'1)::bit}))::divider_state}) '&' S'MAIN_ZERO_DIVISION'0)))))))))))))))))))))))))))))) state,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_END_FLIP_Q'0)) '&' update) (({(SX ({(state '=' S'MAIN'0)::bit}))::bit}) '|' (({(SX ({(state '=' S'MAIN_END_FLIP_Q'0)::bit}))::bit}) '&' (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'66))) l'main'add_q_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'3) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN'17) '|' ((state '=' S'MAIN_END_FLIP_R'2) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1))))))))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' (IF s'20 THEN (IF s'21 THEN l'main'addr_d_cur ELSE s'29) ELSE l'main'addr_d_cur)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::addr}) '&' (IF s'26 THEN s'29 ELSE l'main'addr_d_cur)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::addr}) '&' (IF s'53 THEN l'main'addr_d_cur ELSE s'29)) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::addr}) '&' (IF s'59 THEN (IF l'main'short_d THEN l'main'addr_d_cur ELSE (IF s'65 THEN s'1 ELSE l'main'addr_d_cur)) ELSE l'main'addr_d_cur)) '|' ((({(SX ({(state '=' S'MAIN'3)::bit}))::addr}) '&' (s'34-->laddr)) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'1) '|' ((({(SX ({(state '=' S'MAIN'9)::bit}))::addr}) '&' s'29) '|' (({(SX ({((state '=' S'MAIN'17) '|' (state '=' S'MAIN_END_FLIP_R'2))::bit}))::addr}) '&' s'87)))))))) l'main'addr_d_cur,
        re_ff_en eclk ((state '=' S'MAIN_FINAL_NODES'0) '&' update) (({(SX ({(state '=' S'MAIN_FINAL_NODES'0)::bit}))::addr}) '&' a'mem_alloc'ho'addr) l'main'addr_f,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN_FLIP_N'0) '|' ((state '=' S'MAIN_READ_N'0) '|' (state '=' S'MAIN_READ_N'1)))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' (IF s'20 THEN s'2 ELSE l'main'addr_n_cur)) '|' ((({(SX ({((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'0))::bit}))::addr}) '&' s'16) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'2))) l'main'addr_n_cur,
        re_ff_en eclk (((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'12) '|' (state '=' S'MAIN_READ_N'1))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' a'mem_alloc'ho'addr) '|' ((({(SX ({(state '=' S'MAIN'12)::bit}))::addr}) '&' l'main'addr_nr_next) '|' (({(SX ({(state '=' S'MAIN'7)::bit}))::addr}) '&' s'58))) l'main'addr_nr_cur,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'13) '|' (state '=' S'MAIN_READ_N'1))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' (IF s'20 THEN l'main'addr_nr_prev ELSE l'main'addr_nr_next)) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0) '|' (({(SX ({(state '=' S'MAIN'13)::bit}))::addr}) '&' s'16))) l'main'addr_nr_next,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'12) '|' ((state '=' S'MAIN'14) '|' (state '=' S'MAIN_READ_N'1)))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' (IF s'20 THEN s'0 ELSE l'main'addr_nr_prev)) '|' ((({(SX ({((state '=' S'MAIN'12) '|' (state '=' S'MAIN'14))::bit}))::addr}) '&' l'main'addr_nr_cur) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0))) l'main'addr_nr_prev,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'7) '|' (state '=' S'MAIN'15)))) '&' update) ((({(SX ({(state '=' S'MAIN'15)::bit}))::addr}) '&' (IF s'104 THEN s'2 ELSE l'main'addr_q)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::addr}) '&' (IF s'53 THEN (IF s'54 THEN a'mem_alloc'ho'addr ELSE l'main'addr_q) ELSE l'main'addr_q)) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::addr}) '&' l'main'addr_nr_cur) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0)))) l'main'addr_q,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'8) '|' ((state '=' S'MAIN_END_FLIP_Q'1) '|' (state '=' S'MAIN_END_FLIP_R'2))))) '&' update) ((({(SX ({(state '=' S'MAIN'7)::bit}))::addr}) '&' (IF s'59 THEN (IF l'main'short_d THEN l'main'addr_q_cur ELSE (IF s'65 THEN l'main'addr_q_cur ELSE (IF s'82 THEN l'main'addr_nr_cur ELSE l'main'addr_q_cur))) ELSE l'main'addr_q_cur)) '|' ((({(SX ({(state '=' S'MAIN'8)::bit}))::addr}) '&' (IF s'65 THEN l'main'addr_q ELSE (IF s'82 THEN l'main'addr_q ELSE l'main'addr_q_cur))) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_R'2)::bit}))::addr}) '&' (IF s'89 THEN l'main'addr_q ELSE l'main'addr_q_cur)) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0) '|' (({(SX ({(state '=' S'MAIN_END_FLIP_Q'1)::bit}))::addr}) '&' s'73))))) l'main'addr_q_cur,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'1) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'15) '|' (state '=' S'MAIN'17))))) '&' update) ((({(SX ({(state '=' S'MAIN'15)::bit}))::addr}) '&' (IF s'104 THEN l'main'addr_r1_cur ELSE l'main'addr_r1)) '|' ((({(SX ({(state '=' S'MAIN'1)::bit}))::addr}) '&' (IF s'12 THEN a'mem_alloc'ho'addr ELSE l'main'addr_r1)) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::addr}) '&' (IF s'47 THEN (IF s'31 THEN (IF s'48 THEN l'main'addr_r2 ELSE l'main'addr_r1) ELSE l'main'addr_r1) ELSE l'main'addr_r1)) '|' ((({(SX ({(state '=' S'MAIN'17)::bit}))::addr}) '&' (IF s'89 THEN l'main'addr_r1_cur ELSE l'main'addr_r1)) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0))))) l'main'addr_r1,
        re_ff_en eclk (((state '=' S'MAIN'1) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN'11) '|' ((state '=' S'MAIN_END_FLIP_R'2) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1)))))))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' (IF s'20 THEN (IF s'21 THEN l'main'addr_r1_cur ELSE l'main'addr_r1) ELSE l'main'addr_r1_cur)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::addr}) '&' (IF s'26 THEN l'main'addr_r1 ELSE l'main'addr_r1_cur)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::addr}) '&' (IF s'53 THEN l'main'addr_r1_cur ELSE l'main'addr_r1)) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::addr}) '&' (IF s'59 THEN (IF l'main'short_d THEN l'main'addr_r1_cur ELSE (IF s'65 THEN l'main'addr_r1 ELSE l'main'addr_r1_cur)) ELSE l'main'addr_r1_cur)) '|' ((({(SX ({(state '=' S'MAIN'1)::bit}))::addr}) '&' a'mem_alloc'ho'addr) '|' ((({(SX ({(state '=' S'MAIN'9)::bit}))::addr}) '&' l'main'addr_r1) '|' (({(SX ({((state '=' S'MAIN'11) '|' (state '=' S'MAIN_END_FLIP_R'2))::bit}))::addr}) '&' s'88))))))) l'main'addr_r1_cur,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN'17)) '&' update) ((({(SX ({(state '=' S'MAIN'17)::bit}))::addr}) '&' l'main'addr_r1_cur) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0)) l'main'addr_r1_prev,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' (state '=' S'MAIN'17))) '&' update) ((({(SX ({(state '=' S'MAIN'4)::bit}))::addr}) '&' (IF s'47 THEN (IF s'31 THEN (IF s'48 THEN l'main'addr_r1 ELSE l'main'addr_r2) ELSE l'main'addr_r2) ELSE l'main'addr_r2)) '|' ((({(SX ({(state '=' S'MAIN'17)::bit}))::addr}) '&' (IF s'89 THEN l'main'addr_r2_cur ELSE l'main'addr_r2)) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0))) l'main'addr_r2,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN'11) '|' ((state '=' S'MAIN'16) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1))))))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::addr}) '&' (IF s'20 THEN (IF s'21 THEN l'main'addr_r2_cur ELSE l'main'addr_r2) ELSE l'main'addr_r2_cur)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::addr}) '&' (IF s'26 THEN l'main'addr_r2 ELSE l'main'addr_r2_cur)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::addr}) '&' (IF s'53 THEN l'main'addr_r2_cur ELSE l'main'addr_r2)) '|' ((({(SX ({(state '=' S'MAIN'11)::bit}))::addr}) '&' (l'main'node_r2-->laddr)) '|' ((({(SX ({(state '=' S'MAIN'16)::bit}))::addr}) '&' a'mem_alloc'ho'addr) '|' ((({(SX ({(state '=' S'MAIN'9)::bit}))::addr}) '&' l'main'addr_r2) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0))))))) l'main'addr_r2_cur,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN'17)) '&' update) ((({(SX ({(state '=' S'MAIN'17)::bit}))::addr}) '&' l'main'addr_r2_cur) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'0)) l'main'addr_r2_prev,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_READ_D'0)) '&' update) (({(SX ({((state '=' S'MAIN'0) '|' (state '=' S'MAIN_READ_D'0))::bit}))::bit}) '&' s'7) l'main'd_is_negative,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_END_FLIP_R'1)) '&' update) (({(SX ({(state '=' S'MAIN_END_FLIP_R'1)::bit}))::bit}) '&' (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'83)) l'main'flip_r_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1))))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::Int}) '&' (IF s'20 THEN (IF s'21 THEN l'main'mask ELSE s'101) ELSE l'main'mask)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::Int}) '&' (IF s'26 THEN s'28 ELSE l'main'mask)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::Int}) '&' (IF s'53 THEN l'main'mask ELSE s'94)) '|' (({(SX ({(state '=' S'MAIN'9)::bit}))::Int}) '&' s'91)))) l'main'mask,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_READ_N'1)) '&' update) (({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::bit}) '&' (IF s'20 THEN s'21 ELSE l'main'n_is_negative)) l'main'n_is_negative,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'3) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_END_FLIP_R'1) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1)))))))) '&' update) (({(SX ({(state '=' S'MAIN'9)::bit}))::bit}) '|' ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::bit}) '&' (IF s'20 THEN (IF s'21 THEN l'main'neg_d_carry ELSE ({'1::bit})) ELSE l'main'neg_d_carry)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::bit}) '&' (IF s'26 THEN ({'1::bit}) ELSE l'main'neg_d_carry)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::bit}) '&' (IF s'53 THEN l'main'neg_d_carry ELSE ({'1::bit}))) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::bit}) '&' (IF s'59 THEN (IF l'main'short_d THEN l'main'neg_d_carry ELSE (IF s'65 THEN ({'1::bit}) ELSE l'main'neg_d_carry)) ELSE l'main'neg_d_carry)) '|' (({(SX ({((state '=' S'MAIN'3) '|' (state '=' S'MAIN_END_FLIP_R'1))::bit}))::bit}) '&' s'35)))))) l'main'neg_d_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_FLIP_N'0)) '&' update) (({(SX ({(state '=' S'MAIN'0)::bit}))::bit}) '|' (({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::bit}) '&' (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'22))) l'main'neg_n_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_END_FLIP_Q'0)) '&' update) (({(SX ({(state '=' S'MAIN'0)::bit}))::bit}) '|' (({(SX ({(state '=' S'MAIN_END_FLIP_Q'0)::bit}))::bit}) '&' (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'69))) l'main'neg_q_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'1) '|' ((state '=' S'MAIN'2) '|' ((state '=' S'MAIN'3) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN_END_FLIP_R'0) '|' ((state '=' S'MAIN_END_FLIP_R'1) '|' (state '=' S'MAIN_READ_D'0)))))))) '&' update) ((({(SX ({(state '=' S'MAIN'1)::bit}))::node}) '&' (IF s'12 THEN (l'main'node_d<--int ? ((l'main'node_d-->int)<--simple_Int ? (IF l'main'd_is_negative THEN (('~' ((l'main'node_d-->int)-->simple_Int)) '+' ({'1::simple_Int})) ELSE ((l'main'node_d-->int)-->simple_Int)))) ELSE l'main'node_d)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::node}) '&' (IF s'53 THEN l'main'node_d ELSE (IF s'31 THEN a'mem_read'ho'data ELSE l'main'node_d))) '|' ((({(SX ({((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'2) '|' ((state '=' S'MAIN_END_FLIP_R'0) '|' (state '=' S'MAIN_READ_D'0))))::bit}))::node}) '&' a'mem_read'ho'data) '|' (({(SX ({((state '=' S'MAIN'3) '|' (state '=' S'MAIN_END_FLIP_R'1))::bit}))::node}) '&' s'34)))) l'main'node_d,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN_FINAL_NODES'0) '|' ((state '=' S'MAIN_FINAL_NODES'1) '|' (state '=' S'MAIN_READ_D'0)))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_D'0)::bit}))::node}) '&' (IF s'107 THEN s'10 ELSE l'main'node_f)) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::node}) '&' (IF s'8 THEN s'10 ELSE ({'0::node}))) '|' ((({(SX ({(state '=' S'MAIN_FINAL_NODES'0)::bit}))::node}) '&' ((s'76<--laddr ? (l'main'opcode-->srcA))<--raddr ? l'main'addr_q)) '|' (({(SX ({(state '=' S'MAIN_FINAL_NODES'1)::bit}))::node}) '&' ((s'76<--laddr ? l'main'addr_f)<--raddr ? l'main'addr_r1))))) l'main'node_f,
        re_ff_en eclk (((state '=' S'MAIN'5) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'0))) '&' update) ((({(SX ({(state '=' S'MAIN'5)::bit}))::node}) '&' (IF s'53 THEN (IF s'54 THEN ((({'0::node})<--laddr ? s'0)<--type ? s'3) ELSE l'main'node_n) ELSE l'main'node_n)) '|' (({(SX ({((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'0))::bit}))::node}) '&' a'mem_read'ho'data)) l'main'node_n,
        re_ff_en eclk (((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'0))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'0)::bit}))::node}) '&' (s'17<--int ? (a'mem_read'ho'data-->int))) '|' ((({(SX ({(state '=' S'MAIN'9)::bit}))::node}) '&' a'mem_read'ho'data) '|' (({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::node}) '&' s'25))) l'main'node_nr,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'7) '|' (state '=' S'MAIN_END_FLIP_Q'0)))) '&' update) ((({(SX ({(state '=' S'MAIN'4)::bit}))::node}) '&' (IF s'47 THEN (l'main'node_q<--int ? (IF s'48 THEN ((l'main'node_q-->int) '|' l'main'mask) ELSE (l'main'node_q-->int))) ELSE l'main'node_q)) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::node}) '&' (IF s'59 THEN s'57 ELSE (s'57<--int ? ({'0::Int})))) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_Q'0)::bit}))::node}) '&' (a'mem_read'ho'data<--int ? (IF (l'main'n_is_negative '^' l'main'd_is_negative) THEN (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'69) ELSE s'68))) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::node}) '&' s'4)))) l'main'node_q,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'1) '|' ((state '=' S'MAIN'3) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'7) '|' (state '=' S'MAIN_END_FLIP_R'1)))))) '&' update) ((({(SX ({(state '=' S'MAIN'1)::bit}))::node}) '&' (IF s'12 THEN l'main'node_r1 ELSE (s'4<--laddr ? l'main'addr_r1_prev))) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::node}) '&' (IF s'47 THEN (IF s'31 THEN s'40 ELSE (s'40<--int ? (IF s'48 THEN (s'42-->int) ELSE (s'40-->int)))) ELSE s'40)) '|' ((({(SX ({(state '=' S'MAIN'7)::bit}))::node}) '&' (IF s'59 THEN (IF l'main'short_d THEN (s'61<--int ? ((s'61-->int)<--simple_Int ? (IF (('~' l'main'r1_is_0) '&' l'main'n_is_negative) THEN (((l'main'node_d-->int)-->simple_Int) '-' ((s'61-->int)-->simple_Int)) ELSE ((s'61-->int)-->simple_Int)))) ELSE l'main'node_r1) ELSE l'main'node_r1)) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_R'1)::bit}))::node}) '&' (a'mem_read'ho'data<--int ? (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'83))) '|' (({(SX ({(state '=' S'MAIN'3)::bit}))::node}) '&' a'mem_read'ho'data))))) l'main'node_r1,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' (state '=' S'MAIN'16))) '&' update) ((({(SX ({(state '=' S'MAIN'4)::bit}))::node}) '&' (IF s'47 THEN (IF s'31 THEN (IF s'48 THEN s'52 ELSE s'42) ELSE s'42) ELSE (s'42<--laddr ? s'16))) '|' (({(SX ({(state '=' S'MAIN'16)::bit}))::node}) '&' (s'4<--laddr ? l'main'addr_r2_prev))) l'main'node_r2,
        re_ff_en eclk (initial '&' update) (({(SX ({initial::bit}))::op}) '&' i'opcode) tmp'l'main'opcode,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1)))))) '&' update) (({(SX ({(state '=' S'MAIN'9)::bit}))::bit}) '|' ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::bit}) '&' (IF s'20 THEN (IF s'21 THEN l'main'r1_is_0 ELSE ({'1::bit})) ELSE l'main'r1_is_0)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::bit}) '&' (IF s'26 THEN ({'1::bit}) ELSE l'main'r1_is_0)) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::bit}) '&' (IF s'47 THEN (IF s'48 THEN s'46 ELSE s'45) ELSE s'45)) '|' (({(SX ({(state '=' S'MAIN'5)::bit}))::bit}) '&' (IF s'53 THEN l'main'r1_is_0 ELSE ({'1::bit}))))))) l'main'r1_is_0,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1)))))) '&' update) (({(SX ({(state '=' S'MAIN'9)::bit}))::bit}) '|' ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::bit}) '&' (IF s'20 THEN (IF s'21 THEN l'main'r2_is_0 ELSE ({'1::bit})) ELSE l'main'r2_is_0)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::bit}) '&' (IF s'26 THEN ({'1::bit}) ELSE l'main'r2_is_0)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::bit}) '&' (IF s'53 THEN l'main'r2_is_0 ELSE ({'1::bit}))) '|' (({(SX ({(state '=' S'MAIN'4)::bit}))::bit}) '&' s'46))))) l'main'r2_is_0,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1)))))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::bit}) '&' (IF s'20 THEN (IF s'21 THEN l'main'shift_carry ELSE (((l'main'node_nr-->int) '&' s'101) '!=' ({'0::Int}))) ELSE l'main'shift_carry)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::bit}) '&' (IF s'26 THEN (((s'25-->int) '&' s'28) '!=' ({'0::Int})) ELSE l'main'shift_carry)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::bit}) '&' (IF s'53 THEN l'main'shift_carry ELSE (((l'main'node_nr-->int) '&' s'94) '!=' ({'0::Int})))) '|' ((({(SX ({(state '=' S'MAIN'9)::bit}))::bit}) '&' (((a'mem_read'ho'data-->int) '&' s'91) '!=' ({'0::Int}))) '|' (({(SX ({(state '=' S'MAIN'4)::bit}))::bit}) '&' s'43))))) l'main'shift_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_READ_D'0)) '&' update) ((({(SX ({(state '=' S'MAIN_READ_D'0)::bit}))::bit}) '&' s'106) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::bit}) '&' s'6)) l'main'short_d,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'4) '|' ((state '=' S'MAIN'5) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'1)))))) '&' update) ((({(SX ({(state '=' S'MAIN_READ_N'1)::bit}))::bit}) '&' (IF s'20 THEN (IF s'21 THEN l'main'sub_carry ELSE ({'0::bit})) ELSE l'main'sub_carry)) '|' ((({(SX ({(state '=' S'MAIN_FLIP_N'0)::bit}))::bit}) '&' (IF s'26 THEN ({'0::bit}) ELSE l'main'sub_carry)) '|' ((({(SX ({(state '=' S'MAIN'5)::bit}))::bit}) '&' (IF s'53 THEN l'main'sub_carry ELSE ({'0::bit}))) '|' (({(SX ({(state '=' S'MAIN'4)::bit}))::bit}) '&' s'44)))) l'main'sub_carry,
        re_ff_en eclk (((state '=' S'MAIN'0) '|' (state '=' S'MAIN_READ_D'0)) '&' update) ((({(SX ({(state '=' S'MAIN_READ_D'0)::bit}))::bit}) '&' (IF s'107 THEN ({'1::bit}) ELSE l'main'zero_division_error)) '|' (({(SX ({(state '=' S'MAIN'0)::bit}))::bit}) '&' (IF s'8 THEN ({'1::bit}) ELSE ({'0::bit})))) l'main'zero_division_error,
        re_ff_en eclk (initial '&' update) (({(SX ({initial::bit}))::divider_state}) '&' DONE) tmp'ret'main,
        a'mem_alloc'run <- a'mem_alloc'want,
        a'mem_alloc'want <- (running '&' ((state '=' S'MAIN'1) '|' (((state '=' S'MAIN'5) '&' (s'53 '&' s'54)) '|' ((state '=' S'MAIN'16) '|' ((state '=' S'MAIN_FINAL_NODES'0) '|' (state '=' S'MAIN_READ_N'1)))))),
        a'mem_read'hi'addr <- ((({(SX ({((state '=' S'MAIN'2) '|' ((state '=' S'MAIN_END_FLIP_R'0) '|' (state '=' S'MAIN_READ_D'0)))::bit}))::addr}) '&' l'main'addr_d_cur) '|' ((({(SX ({((state '=' S'MAIN_FLIP_N'0) '|' (state '=' S'MAIN_READ_N'0))::bit}))::addr}) '&' l'main'addr_n_cur) '|' ((({(SX ({((state '=' S'MAIN'9) '|' (state '=' S'MAIN'13))::bit}))::addr}) '&' l'main'addr_nr_cur) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_Q'0)::bit}))::addr}) '&' l'main'addr_q_cur) '|' ((({(SX ({((state '=' S'MAIN'3) '|' (state '=' S'MAIN_END_FLIP_R'1))::bit}))::addr}) '&' l'main'addr_r1_cur) '|' ((({(SX ({(state '=' S'MAIN'4)::bit}))::addr}) '&' l'main'addr_r2_cur) '|' ((({(SX ({(state '=' S'MAIN'0)::bit}))::addr}) '&' s'1) '|' (({(SX ({(state '=' S'MAIN'5)::bit}))::addr}) '&' s'29)))))))),
        a'mem_read'run <- a'mem_read'want,
        a'mem_read'want <- (running '&' ((state '=' S'MAIN'0) '|' ((state '=' S'MAIN'2) '|' ((state '=' S'MAIN'3) '|' (((state '=' S'MAIN'4) '&' ('~' s'47)) '|' (((state '=' S'MAIN'5) '&' (('~' s'53) '&' s'31)) '|' ((state '=' S'MAIN'9) '|' ((state '=' S'MAIN'13) '|' ((state '=' S'MAIN_END_FLIP_Q'0) '|' ((state '=' S'MAIN_END_FLIP_R'0) '|' ((state '=' S'MAIN_END_FLIP_R'1) '|' ((state '=' S'MAIN_FLIP_N'0) '|' ((state '=' S'MAIN_READ_D'0) '|' (state '=' S'MAIN_READ_N'0)))))))))))))),
        a'mem_write'hi'addr <- ((({(SX ({(state '=' S'MAIN'4)::bit}))::addr}) '&' (IF s'48 THEN l'main'addr_r2_cur ELSE l'main'addr_r1_cur)) '|' ((({(SX ({(state '=' S'MAIN_ZERO_DIVISION'0)::bit}))::addr}) '&' (l'main'opcode-->dest)) '|' ((({(SX ({(state '=' S'MAIN_FINAL_NODES'1)::bit}))::addr}) '&' l'main'addr_f) '|' ((({(SX ({((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'12) '|' (state '=' S'MAIN'14)))::bit}))::addr}) '&' l'main'addr_nr_cur) '|' ((({(SX ({(state '=' S'MAIN'6)::bit}))::addr}) '&' l'main'addr_q) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_Q'1)::bit}))::addr}) '&' l'main'addr_q_cur) '|' ((({(SX ({(state '=' S'MAIN'8)::bit}))::addr}) '&' l'main'addr_r1) '|' ((({(SX ({((state '=' S'MAIN'10) '|' ((state '=' S'MAIN'15) '|' (state '=' S'MAIN_END_FLIP_R'2)))::bit}))::addr}) '&' l'main'addr_r1_cur) '|' (({(SX ({((state '=' S'MAIN'11) '|' (state '=' S'MAIN'17))::bit}))::addr}) '&' l'main'addr_r2_cur))))))))),
        a'mem_write'hi'data <- ((({(SX ({(state '=' S'MAIN'4)::bit}))::node}) '&' (IF s'48 THEN s'52 ELSE s'40)) '|' ((({(SX ({((state '=' S'MAIN_FINAL_NODES'1) '|' (state '=' S'MAIN_ZERO_DIVISION'0))::bit}))::node}) '&' l'main'node_f) '|' ((({(SX ({(state '=' S'MAIN'6)::bit}))::node}) '&' l'main'node_n) '|' ((({(SX ({((state '=' S'MAIN'12) '|' (state '=' S'MAIN'14))::bit}))::node}) '&' l'main'node_nr) '|' ((({(SX ({(state '=' S'MAIN_END_FLIP_Q'1)::bit}))::node}) '&' l'main'node_q) '|' ((({(SX ({((state '=' S'MAIN'8) '|' ((state '=' S'MAIN'10) '|' ((state '=' S'MAIN'15) '|' (state '=' S'MAIN_END_FLIP_R'2))))::bit}))::node}) '&' l'main'node_r1) '|' ((({(SX ({((state '=' S'MAIN'11) '|' (state '=' S'MAIN'17))::bit}))::node}) '&' l'main'node_r2) '|' (({(SX ({(state '=' S'MAIN'7)::bit}))::node}) '&' s'57)))))))),
        a'mem_write'run <- a'mem_write'want,
        a'mem_write'want <- (running '&' (((state '=' S'MAIN'4) '&' (s'47 '&' s'31)) '|' ((state '=' S'MAIN'6) '|' ((state '=' S'MAIN'7) '|' ((state '=' S'MAIN'8) '|' ((state '=' S'MAIN'10) '|' ((state '=' S'MAIN'11) '|' ((state '=' S'MAIN'12) '|' ((state '=' S'MAIN'14) '|' ((state '=' S'MAIN'15) '|' ((state '=' S'MAIN'17) '|' ((state '=' S'MAIN_END_FLIP_Q'1) '|' ((state '=' S'MAIN_END_FLIP_R'2) '|' ((state '=' S'MAIN_FINAL_NODES'1) '|' (state '=' S'MAIN_ZERO_DIVISION'0))))))))))))))),
        ack <- (state '=' DONE),
        advance <- (running '&' ((('~' a'mem_alloc'want) '|' a'mem_alloc'done) '&' ((('~' a'mem_read'want) '|' a'mem_read'done) '&' (('~' a'mem_write'want) '|' a'mem_write'done)))),
        eclk <- clk,
        ereset <- reset,
        hold <- ('~' advance),
        initial <- ('~' not'initial),
        l'main'opcode <- (IF initial THEN i'opcode ELSE tmp'l'main'opcode),
        not'done <- ('~' (state '=' DONE)),
        o'addr_q <- l'main'addr_q,
        o'addr_r1 <- l'main'addr_r1,
        o'zero_division_error <- l'main'zero_division_error,
        ret'main <- (IF initial THEN DONE ELSE tmp'ret'main),
        running <- (req '&' not'done),
        s'0 <- ({({(addr_end)::addr})::addr}),
        s'1 <- (l'main'opcode-->srcC),
        s'10 <- (({'0::node})<--type ? ({({(G_NIL)::g_type})::g_type})),
        s'100 <- (({({(\z. smallest_mask z)::(Int->Int)})::(Int->Int)}) (l'main'node_nr-->int)),
        s'101 <- (IF (s'100 '=' ({'0::Int})) THEN ({'1::Int}) ELSE s'100),
        s'104 <- (((l'main'node_d-->int) '=' ({'1::Int})) '&' l'main'short_d),
        s'106 <- (s'5 '&' (l'main'addr_d_cur '=' (l'main'opcode-->srcC))),
        s'107 <- (((a'mem_read'ho'data-->int) '=' ({'0::Int})) '&' s'106),
        s'12 <- (((l'main'node_d-->int) '!=' ({'1::Int})) '&' l'main'short_d),
        s'16 <- (a'mem_read'ho'data-->laddr),
        s'17 <- (s'4<--laddr ? l'main'addr_nr_prev),
        s'2 <- (l'main'opcode-->srcB),
        s'20 <- (l'main'addr_n_cur '=' ({({(addr_end)::addr})::addr})),
        s'21 <- ((({({(\number.\position.(number ~~ position))::(Int->(int->bit))})::(Int->(int->bit))}) (l'main'node_n-->int)) ({(INT_SZ - 1)::int})),
        s'22 <- ((({(\z. ZX z)::(Int->eInt)}) ('~' (a'mem_read'ho'data-->int))) '+' (({(\z. ZX z)::(bit->eInt)}) l'main'neg_n_carry)),
        s'25 <- (s'17<--int ? (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'22)),
        s'26 <- (s'16 '=' ({({(addr_end)::addr})::addr})),
        s'27 <- (({({(\z. smallest_mask z)::(Int->Int)})::(Int->Int)}) (s'25-->int)),
        s'28 <- (IF (s'27 '=' ({'0::Int})) THEN ({'1::Int}) ELSE s'27),
        s'29 <- (IF l'main'short_d THEN ({({(addr_end)::addr})::addr}) ELSE (l'main'opcode-->srcC)),
        s'3 <- ({({(G_INT)::g_type})::g_type}),
        s'31 <- ('~' l'main'short_d),
        s'32 <- ((({(\z. ZX z)::(Int->eInt)}) ('~' (l'main'node_d-->int))) '+' (({(\z. ZX z)::(bit->eInt)}) l'main'neg_d_carry)),
        s'34 <- (l'main'node_d<--int ? (IF l'main'd_is_negative THEN (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'32) ELSE (l'main'node_d-->int))),
        s'35 <- (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'32),
        s'37 <- (((({(\z. ZX z)::(Int->eInt)}) (l'main'node_r1-->int)) '<<' ({'1::eInt})) '+' (({(\z. ZX z)::(bit->eInt)}) l'main'shift_carry)),
        s'38 <- (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'37),
        s'39 <- (((({(\z. ZX z)::(Int->eInt)}) s'38) '-' (({(\z. ZX z)::(Int->eInt)}) (l'main'node_d-->int))) '-' (({(\z. ZX z)::(bit->eInt)}) l'main'sub_carry)),
        s'4 <- (({'0::node})<--type ? s'3),
        s'40 <- (l'main'node_r1<--int ? s'38),
        s'42 <- (l'main'node_r2<--int ? (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'39)),
        s'43 <- (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'37),
        s'44 <- (({({(\number.(number ~~ INT_SZ))::(eInt->bit)})::(eInt->bit)}) s'39),
        s'45 <- (l'main'r1_is_0 '&' ((s'40-->int) '=' ({'0::Int}))),
        s'46 <- (l'main'r2_is_0 '&' ((s'42-->int) '=' ({'0::Int}))),
        s'47 <- (l'main'addr_d_cur '=' ({({(addr_end)::addr})::addr})),
        s'48 <- (('~' s'44) '|' s'43),
        s'5 <- ((a'mem_read'ho'data-->laddr) '=' ({({(addr_end)::addr})::addr})),
        s'52 <- (s'42<--laddr ? s'0),
        s'53 <- ((({({(\number.\position.(number ~~ position))::(Int->(int->bit))})::(Int->(int->bit))}) l'main'mask) ({'0::int})),
        s'54 <- (((l'main'addr_q '=' ({({(addr_end)::addr})::addr})) '&' ('~' (l'main'n_is_negative '^' l'main'd_is_negative))) '&' ((({({(\number.\position.(number ~~ position))::(Int->(int->bit))})::(Int->(int->bit))}) (l'main'node_q-->int)) ({(INT_SZ - 1)::int}))),
        s'57 <- (l'main'node_q<--laddr ? l'main'addr_q),
        s'58 <- (l'main'node_nr-->laddr),
        s'59 <- (s'58 '=' ({({(addr_end)::addr})::addr})),
        s'6 <- (s'5 '&' (s'1 '=' (l'main'opcode-->srcC))),
        s'61 <- ((l'main'node_r1<--laddr ? ({'0::addr}))<--type ? s'3),
        s'65 <- (('~' l'main'r1_is_0) '&' l'main'n_is_negative),
        s'66 <- ((({(\z. ZX z)::(Int->eInt)}) (a'mem_read'ho'data-->int)) '+' (({(\z. ZX z)::(bit->eInt)}) l'main'add_q_carry)),
        s'68 <- (IF (('~' l'main'r1_is_0) '&' l'main'n_is_negative) THEN (({({(\number.(number ~~~ ((INT_SZ-1) -- 0)))::(eInt->Int)})::(eInt->Int)}) s'66) ELSE (a'mem_read'ho'data-->int)),
        s'69 <- ((({(\z. ZX z)::(Int->eInt)}) ('~' s'68)) '+' (({(\z. ZX z)::(bit->eInt)}) l'main'neg_q_carry)),
        s'7 <- (s'5 '&' ((({({(\number.\position.(number ~~ position))::(Int->(int->bit))})::(Int->(int->bit))}) (a'mem_read'ho'data-->int)) ({(INT_SZ - 1)::int}))),
        s'73 <- (l'main'node_q-->laddr),
        s'76 <- (({'0::node})<--type ? ({({(G_APPL)::g_type})::g_type})),
        s'8 <- (((a'mem_read'ho'data-->int) '=' ({'0::Int})) '&' s'6),
        s'82 <- (l'main'n_is_negative '^' l'main'd_is_negative),
        s'83 <- ((({(\z. ZX z)::(Int->eInt)}) (s'34-->int)) '-' ((({(\z. ZX z)::(Int->eInt)}) (a'mem_read'ho'data-->int)) '+' (({(\z. ZX z)::(bit->eInt)}) l'main'flip_r_carry))),
        s'87 <- (l'main'node_d-->laddr),
        s'88 <- (l'main'node_r1-->laddr),
        s'89 <- (s'87 '=' ({({(addr_end)::addr})::addr})),
        s'91 <- ({(top_bit)::Int}),
        s'94 <- (l'main'mask<--simple_Int ? ((l'main'mask-->simple_Int) '>>' ({'1::simple_Int}))),
        update <- advance
    ];


let examine_divider = STE_debug (pexlif2fsm (divider 'clk 'reset 'req 'ack 'i'opcode 'o'zero_division_error 'o'addr_q 'o'addr_r1 'a'mem_alloc'req 'a'mem_alloc'ack 'a'mem_alloc'o'addr 'a'mem_read'req 'a'mem_read'ack 'a'mem_read'i'addr 'a'mem_read'o'data 'a'mem_write'req 'a'mem_write'ack 'a'mem_write'i'addr 'a'mem_write'i'data))
