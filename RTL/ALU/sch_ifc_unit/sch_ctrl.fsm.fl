// sch_ctrl_fsm (autogenerated by Stately)

cload "ste.fl";

ENUM "sch_ctrl_fsm_state"
    [ "IDLE"
    , "P_RD_A"
    , "P_RD_B"
    , "P_RD_C"
    , "P_RD_D"
    , "P_UPDATE"
    , "RD_A"
    , "RD_B"
    , "RD_C"
    , "RD_D"
    , "W_RD_A"
    , "W_RD_B"
    , "W_RD_C"
    , "W_RD_D"
    ];

let sch_ctrl_fsm =
    // clock
    bit_input clk.
    // inputs
    bit_input reset.
    bit_input do_op.
    bit_input read_ack.
    // outputs
    bit_output do_update.
    bit_output flush.
    bit_output read_a_req.
    bit_output read_b_req.
    bit_output read_c_req.
    bit_output read_d_req.
    // internals
    // state
    sch_ctrl_fsm_state_internal state.
    CELL "draw_hier sch_ctrl_fsm"
        [ Moore_FSM "sch_ctrl_fsm_moore" clk state (reset, IDLE)
              [ IDLE --- (do_op '&' read_ack) --- W_RD_A
              , IDLE --- (do_op '&' ('~' read_ack)) --- RD_A
              , P_UPDATE --- ('~' do_op) --- IDLE
              , RD_A --- (read_ack '&' read_ack) --- W_RD_B
              , RD_A --- (read_ack '&' ('~' read_ack)) --- RD_B
              , RD_B --- (read_ack '&' read_ack) --- W_RD_C
              , RD_B --- (read_ack '&' ('~' read_ack)) --- RD_C
              , RD_C --- (read_ack '&' read_ack) --- W_RD_D
              , RD_C --- (read_ack '&' ('~' read_ack)) --- RD_D
              , RD_D --- read_ack --- P_UPDATE
              , W_RD_A --- read_ack --- W_RD_A
              , W_RD_A --- ('~' read_ack) --- RD_A
              , W_RD_B --- read_ack --- W_RD_B
              , W_RD_B --- ('~' read_ack) --- RD_B
              , W_RD_C --- read_ack --- W_RD_C
              , W_RD_C --- ('~' read_ack) --- RD_C
              , W_RD_D --- read_ack --- W_RD_D
              , W_RD_D --- ('~' read_ack) --- RD_D
              ]
        , read_b_req <- (is_RD_B state)
        , flush <- (is_IDLE state)
        , read_c_req <- (is_RD_C state)
        , do_update <- (is_P_UPDATE state)
        , read_d_req <- (is_RD_D state)
        , read_a_req <- (is_RD_A state)
        ];

