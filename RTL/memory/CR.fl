cload "ste.fl";

STRUCT "cr" [ ("cclk","bit"), ("si","bit"), ("so","bit")];

// A control register of arbitrary size (determined by its type).
let CR name =
    cr_inout	    cr.
    output	    out_state.
    //
    internal	    shifted.
    bit_internal    msb.
    let  state =  mk_internal (sprintf "__CR__%s__" name) in
    add_internal state (
    CELL (sprintf "draw_hier CR(%s)" name) [
	shifted <- (state '*' '2) '+' ZX (cr-->si),
	re_ff (cr-->cclk) shifted state,
	msb <- ((state '&' ''(2**(hw_size state-1))) '!=' '0),
	cr-->so <- msb,
	out_state <- state
]);

// Connect a collection of control registers in a daisy chain.
let CR_connect =
    cr_list_output	crs.
    cr_inout		cr.
    CELL "draw_hier CR_connect" (
	(map (\c. c-->cclk <- cr-->cclk) crs) @
	(map2 (\s1.\s2. s2 <- s1) 
	      ((cr-->si) : (map (\c. c-->so) crs))
	      ((map (\c. c-->si) crs)@[cr-->so]))
);

let CR_connect2 =
    cr_inout	cr1.
    cr_inout	cr2.
    cr_inout	cr.
    CELL "draw_hier CR_connect2" [
	cr1-->cclk <- cr-->cclk,
	cr2-->cclk <- cr-->cclk,
	cr1-->si   <- cr-->si,
	cr2-->si   <- cr1-->so,
	cr-->so    <- cr2-->so
];


// A convenient way to set the values of control registers.
let make_CR_ant ckt cr_value_list max_time =
    let vecs = vectors ckt in
    let mk (cname,value) =
	let pat = sprintf "__CR__%s__" cname in
	let candidates = filter (str_is_substr pat) vecs in
	candidates = [] => eprintf "Cannot find a CR named %s" cname |
	length candidates != 1 =>
	    eprintf "CR name %s is not unique. Matches %S" cname candidates
	|
	let vs = md_expand_vectors candidates in
	map2 (\n.\v. (T,n,v,0,max_time)) vs (int2bl (length vs) value)
    in
    flatmap mk cr_value_list
;


//
//TYPE "tst" 7;
//
//let tst =
//    cr_inout	    cr.
//    //
//    tst_internal    i_cnt1 i_cnt2.
//    cr_internal	    c1 c2.
//    CELL "draw_hier tst" [
//        CR "cnt1" c1 i_cnt1,
//        CR "cnt2" c2 i_cnt2,
//	CR_connect [c1,c2] cr
//];
//
//let ckt = pexlif2fsm (tst 'cr);
//let vis = STE_debug ckt;
//
//let ant =
//    make_CR_ant ckt [("cnt1", 0), ("cnt2", 0x1b)] 20
//;
//
//let ste = STE "-e" vis [] ant [] [];
//ste;
//
//let vis = get_current_vis ();
//add_waveform vis ["i_cnt1[6:0]"];
//add_waveform vis ["i_cnt2[6:0]"];
//let tab_1 = draw_fanin vis (0) 20 ["i_cnt1[6:0]","i_cnt2[6:0]"];
//tab_1;
//let tab_2 = draw_fanin vis (-1) 20 ["i_cnt1[6:0]","i_cnt2[6:0]"];
//tab_2;
//
