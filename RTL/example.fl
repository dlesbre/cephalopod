load "ste.fl";

TYPE "byte" 8;

// This is my new cocde
let f pre post x =
  12;


let inc =
    byte_input i.
    byte_output o.
    CELL "draw_hier inc" [
	o <- i '+' '1
];

let example =
    byte_input a b c.
    byte_output o1 o2.
    internal b1.
    CELL "example" [
	inc b b1,
	o1 <- a '+' b1,
	o2 <- o1 '-' c
];

let p = example 'a 'b 'c 'o1 'o2;

p;

let ckt = pexlif2fsm p;

let vis = STE_debug ckt;
vis;

let tab_1 = draw_fanin vis (0) 100 ["o1[7:0]","o2[7:0]"];
tab_1;
add_waveform vis ["a[7:0]"];
add_waveform vis ["b[7:0]"];
add_waveform vis ["c[7:0]"];
add_waveform vis ["o1[7:0]"];
add_waveform vis ["o2[7:0]"];
draw_set_time vis 2;
draw_show_values vis tab_1 T;



// STE opt vis weak_list antecedent consequent trace_list
// opt = "-e"
// weak_list :: (when, node, from, to)
//		 bool  string int int
//
// antecedent: [(when, node, value, from. to)]
//              bool  string bool  int   int
//
//
// consequent: [(when, node, value, from. to)]
//              bool  string bool  int   int
//
// trace_list: [(node, from, to)]
//

let ant = 
    "a[7:0]" is 0x01 in_cycle 0 followed_by
		0x11 in_cycle 1 followed_by
		0xff in_cycle 2
  and
    "b[7:0]" is 0x22 for 3 cycles
  and
    "c[7:0]" is 0x33 for 3 cycles
;


let run1 = STE "-e" vis [] ant [] [];



let ant = 
    "a[7:0]" is "A1[7:0]" in_cycle 0 followed_by
		"c[7:0]" in_cycle 1 followed_by
		0xff in_cycle 2
  and
    "b[7:0]" is 0x0 for 3 cycles
  and
    "c[7:0]" is "A1[7:0]" for 3 cycles
;

let run2 = STE "-e" vis [] ant [] [];

// Evaluate run1, look at the values
// Evaluate run2, and see how some of the values have become symbolic.
