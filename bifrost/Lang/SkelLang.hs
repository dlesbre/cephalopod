module Lang.SkelLang where

-- Haskell module generated by the BNF converter

import Lang.AbsLang
import Lang.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog toplevels -> failure x
transTopLevel :: TopLevel -> Result
transTopLevel x = case x of
  TopDecl decl -> failure x
  TopSub subdef -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  NameDecl ident -> failure x
  ProtocolDecl protocol -> failure x
  StateDecl stateaspects -> failure x
  ActionTypeDecl actiontypename funpat stateaspects1 stateaspects2 -> failure x
  ActionDecl actionname actiontypename provider protocol -> failure x
  GlobalVarDecl vardecl -> failure x
  TypeDecl typename typecompiledefinition -> failure x
  TypeAliasDecl typename type_ -> failure x
  FieldsDecl typename fielddefs -> failure x
  DefineDecl definename defineparams exp -> failure x
transVarDecl :: VarDecl -> Result
transVarDecl x = case x of
  MkVarDecl type_ varnames -> failure x
transStateAspects :: StateAspects -> Result
transStateAspects x = case x of
  StateAspectList stateaspects -> failure x
transProvider :: Provider -> Result
transProvider x = case x of
  ProviderExternal -> failure x
  ProviderModule string -> failure x
transProtocol :: Protocol -> Result
transProtocol x = case x of
  ProtocolAuto -> failure x
  ProtocolGiven commprotocol powerprotocol -> failure x
transCommProtocol :: CommProtocol -> Result
transCommProtocol x = case x of
  CommProtocolTwoPhase -> failure x
  CommProtocolFourPhase -> failure x
  CommProtocolPulseEcho -> failure x
  CommProtocolValidReady -> failure x
  CommProtocolCombinational -> failure x
transPowerProtocol :: PowerProtocol -> Result
transPowerProtocol x = case x of
  PowerProtocolAlwaysOn -> failure x
  PowerProtocolPowerShake -> failure x
transTypeCompileDefinition :: TypeCompileDefinition -> Result
transTypeCompileDefinition x = case x of
  TypeCompileString string -> failure x
  TypeCompileInfer -> failure x
transFieldDef :: FieldDef -> Result
transFieldDef x = case x of
  MkFieldDef fieldname type_ -> failure x
transFieldName :: FieldName -> Result
transFieldName x = case x of
  FieldNameIdent ident -> failure x
  FieldNameString string -> failure x
transFunPat :: FunPat -> Result
transFunPat x = case x of
  FunPatPat pattern -> failure x
  FunPatFun pattern funpat -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PatternParam param -> failure x
  PatternTupleEmpty -> failure x
  PatternTupleTwoPlus pattern patterns -> failure x
transParam :: Param -> Result
transParam x = case x of
  MkParam ident type_ -> failure x
transType :: Type -> Result
transType x = case x of
  FunType type_1 type_2 -> failure x
  NamedType ident -> failure x
  TupleZeroType -> failure x
  TupleTwoPlusType type_ types -> failure x
transSubDef :: SubDef -> Result
transSubDef x = case x of
  MkSub subflags subroutinename funpat sublines -> failure x
transSubFlag :: SubFlag -> Result
transSubFlag x = case x of
  Inline -> failure x
transSubLine :: SubLine -> Result
transSubLine x = case x of
  SubVarDecl vardecl -> failure x
  SubStm stm -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Normal normalstm -> failure x
  Abnormal abnormalstm -> failure x
transNormalStm :: NormalStm -> Result
transNormalStm x = case x of
  Assign assignish -> failure x
  Return -> failure x
  Goto gotolabel -> failure x
  HintPower power actionname -> failure x
transPower :: Power -> Result
transPower x = case x of
  PowerOn -> failure x
  PowerOff -> failure x
transAssignish :: Assignish -> Result
transAssignish x = case x of
  WithLhs exp1 exp2 -> failure x
  WithoutLhs exp -> failure x
transAbnormalStm :: AbnormalStm -> Result
transAbnormalStm x = case x of
  Label gotolabel -> failure x
  Scissors -> failure x
  IfElse exp stmblock1 stmblock2 -> failure x
  IfOnly exp stmblock -> failure x
  While exp stmblock -> failure x
  For assignish1 exp assignish2 stmblock -> failure x
  Block stmblock -> failure x
transStmBlock :: StmBlock -> Result
transStmBlock x = case x of
  MkBlock stms -> failure x
transStateAspect :: StateAspect -> Result
transStateAspect x = case x of
  MkStateAspect ident -> failure x
transTypeName :: TypeName -> Result
transTypeName x = case x of
  MkTypeName ident -> failure x
transVarName :: VarName -> Result
transVarName x = case x of
  MkVarName ident -> failure x
transActionTypeName :: ActionTypeName -> Result
transActionTypeName x = case x of
  MkActionTypeName ident -> failure x
transActionName :: ActionName -> Result
transActionName x = case x of
  MkActionName ident -> failure x
transDefineName :: DefineName -> Result
transDefineName x = case x of
  MkDefineName ident -> failure x
transDefineParam :: DefineParam -> Result
transDefineParam x = case x of
  MkDefineParam ident -> failure x
transSubroutineName :: SubroutineName -> Result
transSubroutineName x = case x of
  MkSubroutineName ident -> failure x
transGotoLabel :: GotoLabel -> Result
transGotoLabel x = case x of
  MkGotoLabel ident -> failure x
transCall :: Call -> Result
transCall x = case x of
  ActionCall actionname args -> failure x
  SubCall subroutinename args -> failure x
transArgs :: Args -> Result
transArgs x = case x of
  MkArgs exps -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EIfThenElse exp1 exp2 exp3 -> failure x
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EXor exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENeq exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELte exp1 exp2 -> failure x
  EGte exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ETimes exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EShiftL exp1 exp2 -> failure x
  EShiftR exp1 exp2 -> failure x
  EArithShiftR exp1 exp2 -> failure x
  ENot exp -> failure x
  ECall call -> failure x
  EApp exp1 exp2 -> failure x
  EVar varname -> failure x
  EIntLit integer -> failure x
  EBlob string -> failure x
  EField exp fieldname -> failure x
  ETupleZero -> failure x
  ETupleTwoPlus exp exps -> failure x
  EProj exp integer -> failure x
  ETypeAnn exp type_ -> failure x
  EIgnore -> failure x

