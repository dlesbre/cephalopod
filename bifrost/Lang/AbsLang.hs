

module Lang.AbsLang where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [TopLevel]
  deriving (Eq, Ord, Show, Read)

data TopLevel = TopDecl Decl | TopSub SubDef
  deriving (Eq, Ord, Show, Read)

data Decl
    = NameDecl Ident
    | ProtocolDecl Protocol
    | StateDecl [StateAspect]
    | ActionTypeDecl ActionTypeName FunPat StateAspects StateAspects
    | ActionDecl ActionName ActionTypeName Provider Protocol
    | GlobalVarDecl VarDecl
    | TypeDecl TypeName TypeCompileDefinition
    | TypeAliasDecl TypeName Type
    | FieldsDecl TypeName [FieldDef]
    | DefineDecl DefineName [DefineParam] Exp
  deriving (Eq, Ord, Show, Read)

data VarDecl = MkVarDecl Type [VarName]
  deriving (Eq, Ord, Show, Read)

data StateAspects = StateAspectList [StateAspect]
  deriving (Eq, Ord, Show, Read)

data Provider = ProviderExternal | ProviderModule String
  deriving (Eq, Ord, Show, Read)

data Protocol
    = ProtocolAuto | ProtocolGiven CommProtocol PowerProtocol
  deriving (Eq, Ord, Show, Read)

data CommProtocol
    = CommProtocolTwoPhase
    | CommProtocolFourPhase
    | CommProtocolPulseEcho
    | CommProtocolValidReady
    | CommProtocolCombinational
  deriving (Eq, Ord, Show, Read)

data PowerProtocol
    = PowerProtocolAlwaysOn | PowerProtocolPowerShake
  deriving (Eq, Ord, Show, Read)

data TypeCompileDefinition
    = TypeCompileString String | TypeCompileInfer
  deriving (Eq, Ord, Show, Read)

data FieldDef = MkFieldDef FieldName Type
  deriving (Eq, Ord, Show, Read)

data FieldName = FieldNameIdent Ident | FieldNameString String
  deriving (Eq, Ord, Show, Read)

data FunPat = FunPatPat Pattern | FunPatFun Pattern FunPat
  deriving (Eq, Ord, Show, Read)

data Pattern
    = PatternParam Param
    | PatternTupleEmpty
    | PatternTupleTwoPlus Pattern [Pattern]
  deriving (Eq, Ord, Show, Read)

data Param = MkParam Ident Type
  deriving (Eq, Ord, Show, Read)

data Type
    = FunType Type Type
    | NamedType Ident
    | TupleZeroType
    | TupleTwoPlusType Type [Type]
  deriving (Eq, Ord, Show, Read)

data SubDef = MkSub [SubFlag] SubroutineName FunPat [SubLine]
  deriving (Eq, Ord, Show, Read)

data SubFlag = Inline
  deriving (Eq, Ord, Show, Read)

data SubLine = SubVarDecl VarDecl | SubStm Stm
  deriving (Eq, Ord, Show, Read)

data Stm = Normal NormalStm | Abnormal AbnormalStm
  deriving (Eq, Ord, Show, Read)

data NormalStm
    = Assign Assignish
    | Return
    | Goto GotoLabel
    | HintPower Power ActionName
  deriving (Eq, Ord, Show, Read)

data Power = PowerOn | PowerOff
  deriving (Eq, Ord, Show, Read)

data Assignish = WithLhs Exp Exp | WithoutLhs Exp
  deriving (Eq, Ord, Show, Read)

data AbnormalStm
    = Label GotoLabel
    | Scissors
    | IfElse Exp StmBlock StmBlock
    | IfOnly Exp StmBlock
    | While Exp StmBlock
    | For Assignish Exp Assignish StmBlock
    | Block StmBlock
  deriving (Eq, Ord, Show, Read)

data StmBlock = MkBlock [Stm]
  deriving (Eq, Ord, Show, Read)

data StateAspect = MkStateAspect Ident
  deriving (Eq, Ord, Show, Read)

data TypeName = MkTypeName Ident
  deriving (Eq, Ord, Show, Read)

data VarName = MkVarName Ident
  deriving (Eq, Ord, Show, Read)

data ActionTypeName = MkActionTypeName Ident
  deriving (Eq, Ord, Show, Read)

data ActionName = MkActionName Ident
  deriving (Eq, Ord, Show, Read)

data DefineName = MkDefineName Ident
  deriving (Eq, Ord, Show, Read)

data DefineParam = MkDefineParam Ident
  deriving (Eq, Ord, Show, Read)

data SubroutineName = MkSubroutineName Ident
  deriving (Eq, Ord, Show, Read)

data GotoLabel = MkGotoLabel Ident
  deriving (Eq, Ord, Show, Read)

data Call
    = ActionCall ActionName Args | SubCall SubroutineName Args
  deriving (Eq, Ord, Show, Read)

data Args = MkArgs [Exp]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EIfThenElse Exp Exp Exp
    | EOr Exp Exp
    | EAnd Exp Exp
    | EXor Exp Exp
    | EEq Exp Exp
    | ENeq Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELte Exp Exp
    | EGte Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EShiftL Exp Exp
    | EShiftR Exp Exp
    | EArithShiftR Exp Exp
    | ENot Exp
    | ECall Call
    | EApp Exp Exp
    | EVar VarName
    | EIntLit Integer
    | EBlob String
    | EField Exp FieldName
    | ETupleZero
    | ETupleTwoPlus Exp [Exp]
    | EProj Exp Integer
    | ETypeAnn Exp Type
    | EIgnore
  deriving (Eq, Ord, Show, Read)

