{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Lang.
--   Generated by the BNF converter.

module Lang.PrintLang where

import qualified Lang.AbsLang
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Lang.AbsLang.Ident where
  prt _ (Lang.AbsLang.Ident i) = doc (showString i)

instance Print Lang.AbsLang.Program where
  prt i e = case e of
    Lang.AbsLang.Prog toplevels -> prPrec i 0 (concatD [prt 0 toplevels])

instance Print [Lang.AbsLang.TopLevel] where
  prt = prtList

instance Print Lang.AbsLang.TopLevel where
  prt i e = case e of
    Lang.AbsLang.TopDecl decl -> prPrec i 0 (concatD [prt 0 decl, doc (showString ";")])
    Lang.AbsLang.TopSub subdef -> prPrec i 0 (concatD [prt 0 subdef])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Lang.AbsLang.Decl where
  prt i e = case e of
    Lang.AbsLang.NameDecl id -> prPrec i 0 (concatD [doc (showString "name"), prt 0 id])
    Lang.AbsLang.ProtocolDecl protocol -> prPrec i 0 (concatD [doc (showString "protocol"), prt 0 protocol])
    Lang.AbsLang.StateDecl stateaspects -> prPrec i 0 (concatD [doc (showString "state"), prt 0 stateaspects])
    Lang.AbsLang.ActionTypeDecl actiontypename funpat stateaspects1 stateaspects2 -> prPrec i 0 (concatD [doc (showString "actiontype"), prt 0 actiontypename, doc (showString "="), prt 0 funpat, doc (showString "reading"), prt 0 stateaspects1, doc (showString "writing"), prt 0 stateaspects2])
    Lang.AbsLang.ActionDecl actionname actiontypename provider protocol -> prPrec i 0 (concatD [doc (showString "action"), prt 0 actionname, doc (showString ":"), prt 0 actiontypename, doc (showString "provided"), doc (showString "by"), prt 0 provider, doc (showString "via"), prt 0 protocol])
    Lang.AbsLang.GlobalVarDecl vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
    Lang.AbsLang.TypeDecl typename typecompiledefinition -> prPrec i 0 (concatD [doc (showString "type"), prt 0 typename, prt 0 typecompiledefinition])
    Lang.AbsLang.TypeAliasDecl typename type_ -> prPrec i 0 (concatD [doc (showString "alias"), prt 0 typename, doc (showString "="), prt 0 type_])
    Lang.AbsLang.FieldsDecl typename fielddefs -> prPrec i 0 (concatD [doc (showString "fields"), prt 0 typename, doc (showString "="), doc (showString "["), prt 0 fielddefs, doc (showString "]")])
    Lang.AbsLang.DefineDecl definename defineparams exp -> prPrec i 0 (concatD [doc (showString "define"), prt 0 definename, prt 0 defineparams, doc (showString "="), prt 0 exp])

instance Print [Lang.AbsLang.FieldDef] where
  prt = prtList

instance Print [Lang.AbsLang.DefineParam] where
  prt = prtList

instance Print Lang.AbsLang.VarDecl where
  prt i e = case e of
    Lang.AbsLang.MkVarDecl type_ varnames -> prPrec i 0 (concatD [doc (showString "var"), prt 1 type_, prt 0 varnames])

instance Print [Lang.AbsLang.VarName] where
  prt = prtList

instance Print Lang.AbsLang.StateAspects where
  prt i e = case e of
    Lang.AbsLang.StateAspectList stateaspects -> prPrec i 0 (concatD [doc (showString "["), prt 0 stateaspects, doc (showString "]")])

instance Print [Lang.AbsLang.StateAspect] where
  prt = prtList

instance Print Lang.AbsLang.Provider where
  prt i e = case e of
    Lang.AbsLang.ProviderExternal -> prPrec i 0 (concatD [doc (showString "external")])
    Lang.AbsLang.ProviderModule str -> prPrec i 0 (concatD [prt 0 str])

instance Print Lang.AbsLang.Protocol where
  prt i e = case e of
    Lang.AbsLang.ProtocolAuto -> prPrec i 0 (concatD [doc (showString "auto")])
    Lang.AbsLang.ProtocolGiven commprotocol powerprotocol -> prPrec i 0 (concatD [prt 0 commprotocol, prt 0 powerprotocol])

instance Print Lang.AbsLang.CommProtocol where
  prt i e = case e of
    Lang.AbsLang.CommProtocolTwoPhase -> prPrec i 0 (concatD [doc (showString "twophase")])
    Lang.AbsLang.CommProtocolFourPhase -> prPrec i 0 (concatD [doc (showString "fourphase")])
    Lang.AbsLang.CommProtocolPulseEcho -> prPrec i 0 (concatD [doc (showString "pulseecho")])
    Lang.AbsLang.CommProtocolValidReady -> prPrec i 0 (concatD [doc (showString "validready")])
    Lang.AbsLang.CommProtocolCombinational -> prPrec i 0 (concatD [doc (showString "combinational")])

instance Print Lang.AbsLang.PowerProtocol where
  prt i e = case e of
    Lang.AbsLang.PowerProtocolAlwaysOn -> prPrec i 0 (concatD [doc (showString "alwayson")])
    Lang.AbsLang.PowerProtocolPowerShake -> prPrec i 0 (concatD [doc (showString "powershake")])

instance Print Lang.AbsLang.TypeCompileDefinition where
  prt i e = case e of
    Lang.AbsLang.TypeCompileString str -> prPrec i 0 (concatD [doc (showString "=>"), prt 0 str])
    Lang.AbsLang.TypeCompileInfer -> prPrec i 0 (concatD [])

instance Print Lang.AbsLang.FieldDef where
  prt i e = case e of
    Lang.AbsLang.MkFieldDef fieldname type_ -> prPrec i 0 (concatD [prt 0 fieldname, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lang.AbsLang.FieldName where
  prt i e = case e of
    Lang.AbsLang.FieldNameIdent id -> prPrec i 0 (concatD [prt 0 id])
    Lang.AbsLang.FieldNameString str -> prPrec i 0 (concatD [prt 0 str])

instance Print Lang.AbsLang.FunPat where
  prt i e = case e of
    Lang.AbsLang.FunPatPat pattern -> prPrec i 0 (concatD [prt 0 pattern])
    Lang.AbsLang.FunPatFun pattern funpat -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "->"), prt 0 funpat])

instance Print Lang.AbsLang.Pattern where
  prt i e = case e of
    Lang.AbsLang.PatternParam param -> prPrec i 0 (concatD [prt 0 param])
    Lang.AbsLang.PatternTupleEmpty -> prPrec i 0 (concatD [doc (showString "()")])
    Lang.AbsLang.PatternTupleTwoPlus pattern patterns -> prPrec i 0 (concatD [doc (showString "("), prt 0 pattern, doc (showString ","), prt 0 patterns, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Lang.AbsLang.Pattern] where
  prt = prtList

instance Print Lang.AbsLang.Param where
  prt i e = case e of
    Lang.AbsLang.MkParam id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 1 type_])

instance Print Lang.AbsLang.Type where
  prt i e = case e of
    Lang.AbsLang.FunType type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    Lang.AbsLang.NamedType id -> prPrec i 1 (concatD [prt 0 id])
    Lang.AbsLang.TupleZeroType -> prPrec i 1 (concatD [doc (showString "()")])
    Lang.AbsLang.TupleTwoPlusType type_ types -> prPrec i 1 (concatD [doc (showString "("), prt 0 type_, doc (showString ","), prt 0 types, doc (showString ")")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Lang.AbsLang.Type] where
  prt = prtList

instance Print Lang.AbsLang.SubDef where
  prt i e = case e of
    Lang.AbsLang.MkSub subflags subroutinename funpat sublines -> prPrec i 0 (concatD [doc (showString "subroutine"), prt 0 subflags, prt 0 subroutinename, doc (showString ":"), prt 0 funpat, doc (showString "{"), prt 0 sublines, doc (showString "}")])

instance Print [Lang.AbsLang.SubFlag] where
  prt = prtList

instance Print [Lang.AbsLang.SubLine] where
  prt = prtList

instance Print Lang.AbsLang.SubFlag where
  prt i e = case e of
    Lang.AbsLang.Inline -> prPrec i 0 (concatD [doc (showString "inline")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Lang.AbsLang.SubLine where
  prt i e = case e of
    Lang.AbsLang.SubVarDecl vardecl -> prPrec i 0 (concatD [prt 0 vardecl, doc (showString ";")])
    Lang.AbsLang.SubStm stm -> prPrec i 0 (concatD [prt 0 stm])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Lang.AbsLang.Stm where
  prt i e = case e of
    Lang.AbsLang.Normal normalstm -> prPrec i 0 (concatD [prt 0 normalstm, doc (showString ";")])
    Lang.AbsLang.Abnormal abnormalstm -> prPrec i 0 (concatD [prt 0 abnormalstm])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Lang.AbsLang.NormalStm where
  prt i e = case e of
    Lang.AbsLang.Assign assignish -> prPrec i 0 (concatD [prt 0 assignish])
    Lang.AbsLang.Return -> prPrec i 0 (concatD [doc (showString "return")])
    Lang.AbsLang.Goto gotolabel -> prPrec i 0 (concatD [doc (showString "goto"), prt 0 gotolabel])
    Lang.AbsLang.HintPower power actionname -> prPrec i 0 (concatD [doc (showString "power"), prt 0 power, prt 0 actionname])

instance Print Lang.AbsLang.Power where
  prt i e = case e of
    Lang.AbsLang.PowerOn -> prPrec i 0 (concatD [doc (showString "on")])
    Lang.AbsLang.PowerOff -> prPrec i 0 (concatD [doc (showString "off")])

instance Print Lang.AbsLang.Assignish where
  prt i e = case e of
    Lang.AbsLang.WithLhs exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "="), prt 0 exp2])
    Lang.AbsLang.WithoutLhs exp -> prPrec i 0 (concatD [prt 0 exp])

instance Print Lang.AbsLang.AbnormalStm where
  prt i e = case e of
    Lang.AbsLang.Label gotolabel -> prPrec i 0 (concatD [doc (showString "label"), prt 0 gotolabel, doc (showString ":")])
    Lang.AbsLang.Scissors -> prPrec i 0 (concatD [doc (showString "--%<--")])
    Lang.AbsLang.IfElse exp stmblock1 stmblock2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmblock1, doc (showString "else"), prt 0 stmblock2])
    Lang.AbsLang.IfOnly exp stmblock -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmblock])
    Lang.AbsLang.While exp stmblock -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmblock])
    Lang.AbsLang.For assignish1 exp assignish2 stmblock -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 assignish1, doc (showString ";"), prt 0 exp, doc (showString ";"), prt 0 assignish2, doc (showString ")"), prt 0 stmblock])
    Lang.AbsLang.Block stmblock -> prPrec i 0 (concatD [prt 0 stmblock])

instance Print Lang.AbsLang.StmBlock where
  prt i e = case e of
    Lang.AbsLang.MkBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])

instance Print [Lang.AbsLang.Stm] where
  prt = prtList

instance Print Lang.AbsLang.StateAspect where
  prt i e = case e of
    Lang.AbsLang.MkStateAspect id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lang.AbsLang.TypeName where
  prt i e = case e of
    Lang.AbsLang.MkTypeName id -> prPrec i 0 (concatD [prt 0 id])

instance Print Lang.AbsLang.VarName where
  prt i e = case e of
    Lang.AbsLang.MkVarName id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Lang.AbsLang.ActionTypeName where
  prt i e = case e of
    Lang.AbsLang.MkActionTypeName id -> prPrec i 0 (concatD [prt 0 id])

instance Print Lang.AbsLang.ActionName where
  prt i e = case e of
    Lang.AbsLang.MkActionName id -> prPrec i 0 (concatD [prt 0 id])

instance Print Lang.AbsLang.DefineName where
  prt i e = case e of
    Lang.AbsLang.MkDefineName id -> prPrec i 0 (concatD [prt 0 id])

instance Print Lang.AbsLang.DefineParam where
  prt i e = case e of
    Lang.AbsLang.MkDefineParam id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Lang.AbsLang.SubroutineName where
  prt i e = case e of
    Lang.AbsLang.MkSubroutineName id -> prPrec i 0 (concatD [prt 0 id])

instance Print Lang.AbsLang.GotoLabel where
  prt i e = case e of
    Lang.AbsLang.MkGotoLabel id -> prPrec i 0 (concatD [prt 0 id])

instance Print Lang.AbsLang.Call where
  prt i e = case e of
    Lang.AbsLang.ActionCall actionname args -> prPrec i 0 (concatD [doc (showString "do"), prt 0 actionname, prt 0 args])
    Lang.AbsLang.SubCall subroutinename args -> prPrec i 0 (concatD [doc (showString "call"), prt 0 subroutinename, prt 0 args])

instance Print Lang.AbsLang.Args where
  prt i e = case e of
    Lang.AbsLang.MkArgs exps -> prPrec i 0 (concatD [prt 10 exps])

instance Print [Lang.AbsLang.Exp] where
  prt = prtList

instance Print Lang.AbsLang.Exp where
  prt i e = case e of
    Lang.AbsLang.EIfThenElse exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    Lang.AbsLang.EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "|"), prt 2 exp2])
    Lang.AbsLang.EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "&"), prt 3 exp2])
    Lang.AbsLang.EXor exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "^"), prt 3 exp2])
    Lang.AbsLang.EEq exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "=="), prt 4 exp2])
    Lang.AbsLang.ENeq exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "!="), prt 4 exp2])
    Lang.AbsLang.ELt exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "<"), prt 4 exp2])
    Lang.AbsLang.EGt exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString ">"), prt 4 exp2])
    Lang.AbsLang.ELte exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "<="), prt 4 exp2])
    Lang.AbsLang.EGte exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString ">="), prt 4 exp2])
    Lang.AbsLang.EPlus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "+"), prt 5 exp2])
    Lang.AbsLang.EMinus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "-"), prt 5 exp2])
    Lang.AbsLang.ETimes exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "*"), prt 6 exp2])
    Lang.AbsLang.EDiv exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "/"), prt 6 exp2])
    Lang.AbsLang.EMod exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "%"), prt 6 exp2])
    Lang.AbsLang.EShiftL exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "<<"), prt 7 exp2])
    Lang.AbsLang.EShiftR exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString ">>"), prt 7 exp2])
    Lang.AbsLang.EArithShiftR exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "|>>"), prt 7 exp2])
    Lang.AbsLang.ENot exp -> prPrec i 7 (concatD [doc (showString "~"), prt 7 exp])
    Lang.AbsLang.ECall call -> prPrec i 8 (concatD [prt 0 call])
    Lang.AbsLang.EApp exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, prt 10 exp2])
    Lang.AbsLang.EVar varname -> prPrec i 10 (concatD [prt 0 varname])
    Lang.AbsLang.EIntLit n -> prPrec i 10 (concatD [prt 0 n])
    Lang.AbsLang.EBlob str -> prPrec i 10 (concatD [prt 0 str])
    Lang.AbsLang.EField exp fieldname -> prPrec i 10 (concatD [prt 10 exp, doc (showString "-->"), prt 0 fieldname])
    Lang.AbsLang.ETupleZero -> prPrec i 10 (concatD [doc (showString "()")])
    Lang.AbsLang.ETupleTwoPlus exp exps -> prPrec i 10 (concatD [doc (showString "("), prt 0 exp, doc (showString ","), prt 0 exps, doc (showString ")")])
    Lang.AbsLang.EProj exp n -> prPrec i 10 (concatD [prt 10 exp, doc (showString "."), prt 0 n])
    Lang.AbsLang.ETypeAnn exp type_ -> prPrec i 10 (concatD [doc (showString "("), prt 10 exp, doc (showString "::"), prt 0 type_, doc (showString ")")])
    Lang.AbsLang.EIgnore -> prPrec i 10 (concatD [doc (showString "_")])
  prtList 10 [] = concatD []
  prtList 10 (x:xs) = concatD [prt 10 x, prt 10 xs]
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

