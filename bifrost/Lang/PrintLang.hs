{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Lang.PrintLang where

-- pretty-printer generated by the BNF converter

import Lang.AbsLang
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Prog toplevels -> prPrec i 0 (concatD [prt 0 toplevels])

instance Print TopLevel where
  prt i e = case e of
    TopDecl decl -> prPrec i 0 (concatD [prt 0 decl, doc (showString ";")])
    TopSub subdef -> prPrec i 0 (concatD [prt 0 subdef])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Decl where
  prt i e = case e of
    NameDecl id -> prPrec i 0 (concatD [doc (showString "name"), prt 0 id])
    ProtocolDecl protocol -> prPrec i 0 (concatD [doc (showString "protocol"), prt 0 protocol])
    StateDecl stateaspects -> prPrec i 0 (concatD [doc (showString "state"), prt 0 stateaspects])
    ActionTypeDecl actiontypename funpat stateaspects1 stateaspects2 -> prPrec i 0 (concatD [doc (showString "actiontype"), prt 0 actiontypename, doc (showString "="), prt 0 funpat, doc (showString "reading"), prt 0 stateaspects1, doc (showString "writing"), prt 0 stateaspects2])
    ActionDecl actionname actiontypename provider protocol -> prPrec i 0 (concatD [doc (showString "action"), prt 0 actionname, doc (showString ":"), prt 0 actiontypename, doc (showString "provided"), doc (showString "by"), prt 0 provider, doc (showString "via"), prt 0 protocol])
    GlobalVarDecl vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
    TypeDecl typename typecompiledefinition -> prPrec i 0 (concatD [doc (showString "type"), prt 0 typename, prt 0 typecompiledefinition])
    TypeAliasDecl typename type_ -> prPrec i 0 (concatD [doc (showString "alias"), prt 0 typename, doc (showString "="), prt 0 type_])
    FieldsDecl typename fielddefs -> prPrec i 0 (concatD [doc (showString "fields"), prt 0 typename, doc (showString "="), doc (showString "["), prt 0 fielddefs, doc (showString "]")])
    DefineDecl definename defineparams exp -> prPrec i 0 (concatD [doc (showString "define"), prt 0 definename, prt 0 defineparams, doc (showString "="), prt 0 exp])

instance Print VarDecl where
  prt i e = case e of
    MkVarDecl type_ varnames -> prPrec i 0 (concatD [doc (showString "var"), prt 1 type_, prt 0 varnames])

instance Print StateAspects where
  prt i e = case e of
    StateAspectList stateaspects -> prPrec i 0 (concatD [doc (showString "["), prt 0 stateaspects, doc (showString "]")])

instance Print Provider where
  prt i e = case e of
    ProviderExternal -> prPrec i 0 (concatD [doc (showString "external")])
    ProviderModule str -> prPrec i 0 (concatD [prt 0 str])

instance Print Protocol where
  prt i e = case e of
    ProtocolAuto -> prPrec i 0 (concatD [doc (showString "auto")])
    ProtocolGiven commprotocol powerprotocol -> prPrec i 0 (concatD [prt 0 commprotocol, prt 0 powerprotocol])

instance Print CommProtocol where
  prt i e = case e of
    CommProtocolTwoPhase -> prPrec i 0 (concatD [doc (showString "twophase")])
    CommProtocolFourPhase -> prPrec i 0 (concatD [doc (showString "fourphase")])
    CommProtocolPulseEcho -> prPrec i 0 (concatD [doc (showString "pulseecho")])
    CommProtocolValidReady -> prPrec i 0 (concatD [doc (showString "validready")])
    CommProtocolCombinational -> prPrec i 0 (concatD [doc (showString "combinational")])

instance Print PowerProtocol where
  prt i e = case e of
    PowerProtocolAlwaysOn -> prPrec i 0 (concatD [doc (showString "alwayson")])
    PowerProtocolPowerShake -> prPrec i 0 (concatD [doc (showString "powershake")])

instance Print TypeCompileDefinition where
  prt i e = case e of
    TypeCompileString str -> prPrec i 0 (concatD [doc (showString "=>"), prt 0 str])
    TypeCompileInfer -> prPrec i 0 (concatD [])

instance Print FieldDef where
  prt i e = case e of
    MkFieldDef fieldname type_ -> prPrec i 0 (concatD [prt 0 fieldname, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FieldName where
  prt i e = case e of
    FieldNameIdent id -> prPrec i 0 (concatD [prt 0 id])
    FieldNameString str -> prPrec i 0 (concatD [prt 0 str])

instance Print FunPat where
  prt i e = case e of
    FunPatPat pattern -> prPrec i 0 (concatD [prt 0 pattern])
    FunPatFun pattern funpat -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "->"), prt 0 funpat])

instance Print Pattern where
  prt i e = case e of
    PatternParam param -> prPrec i 0 (concatD [prt 0 param])
    PatternTupleEmpty -> prPrec i 0 (concatD [doc (showString "()")])
    PatternTupleTwoPlus pattern patterns -> prPrec i 0 (concatD [doc (showString "("), prt 0 pattern, doc (showString ","), prt 0 patterns, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Param where
  prt i e = case e of
    MkParam id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 1 type_])

instance Print Type where
  prt i e = case e of
    FunType type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    NamedType id -> prPrec i 1 (concatD [prt 0 id])
    TupleZeroType -> prPrec i 1 (concatD [doc (showString "()")])
    TupleTwoPlusType type_ types -> prPrec i 1 (concatD [doc (showString "("), prt 0 type_, doc (showString ","), prt 0 types, doc (showString ")")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print SubDef where
  prt i e = case e of
    MkSub subflags subroutinename funpat sublines -> prPrec i 0 (concatD [doc (showString "subroutine"), prt 0 subflags, prt 0 subroutinename, doc (showString ":"), prt 0 funpat, doc (showString "{"), prt 0 sublines, doc (showString "}")])

instance Print SubFlag where
  prt i e = case e of
    Inline -> prPrec i 0 (concatD [doc (showString "inline")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print SubLine where
  prt i e = case e of
    SubVarDecl vardecl -> prPrec i 0 (concatD [prt 0 vardecl, doc (showString ";")])
    SubStm stm -> prPrec i 0 (concatD [prt 0 stm])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Stm where
  prt i e = case e of
    Normal normalstm -> prPrec i 0 (concatD [prt 0 normalstm, doc (showString ";")])
    Abnormal abnormalstm -> prPrec i 0 (concatD [prt 0 abnormalstm])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print NormalStm where
  prt i e = case e of
    Assign assignish -> prPrec i 0 (concatD [prt 0 assignish])
    Return -> prPrec i 0 (concatD [doc (showString "return")])
    Goto gotolabel -> prPrec i 0 (concatD [doc (showString "goto"), prt 0 gotolabel])
    HintPower power actionname -> prPrec i 0 (concatD [doc (showString "power"), prt 0 power, prt 0 actionname])

instance Print Power where
  prt i e = case e of
    PowerOn -> prPrec i 0 (concatD [doc (showString "on")])
    PowerOff -> prPrec i 0 (concatD [doc (showString "off")])

instance Print Assignish where
  prt i e = case e of
    WithLhs exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "="), prt 0 exp2])
    WithoutLhs exp -> prPrec i 0 (concatD [prt 0 exp])

instance Print AbnormalStm where
  prt i e = case e of
    Label gotolabel -> prPrec i 0 (concatD [doc (showString "label"), prt 0 gotolabel, doc (showString ":")])
    Scissors -> prPrec i 0 (concatD [doc (showString "--%<--")])
    IfElse exp stmblock1 stmblock2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmblock1, doc (showString "else"), prt 0 stmblock2])
    IfOnly exp stmblock -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmblock])
    While exp stmblock -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmblock])
    For assignish1 exp assignish2 stmblock -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 assignish1, doc (showString ";"), prt 0 exp, doc (showString ";"), prt 0 assignish2, doc (showString ")"), prt 0 stmblock])
    Block stmblock -> prPrec i 0 (concatD [prt 0 stmblock])

instance Print StmBlock where
  prt i e = case e of
    MkBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])

instance Print StateAspect where
  prt i e = case e of
    MkStateAspect id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print TypeName where
  prt i e = case e of
    MkTypeName id -> prPrec i 0 (concatD [prt 0 id])

instance Print VarName where
  prt i e = case e of
    MkVarName id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print ActionTypeName where
  prt i e = case e of
    MkActionTypeName id -> prPrec i 0 (concatD [prt 0 id])

instance Print ActionName where
  prt i e = case e of
    MkActionName id -> prPrec i 0 (concatD [prt 0 id])

instance Print DefineName where
  prt i e = case e of
    MkDefineName id -> prPrec i 0 (concatD [prt 0 id])

instance Print DefineParam where
  prt i e = case e of
    MkDefineParam id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print SubroutineName where
  prt i e = case e of
    MkSubroutineName id -> prPrec i 0 (concatD [prt 0 id])

instance Print GotoLabel where
  prt i e = case e of
    MkGotoLabel id -> prPrec i 0 (concatD [prt 0 id])

instance Print Call where
  prt i e = case e of
    ActionCall actionname args -> prPrec i 0 (concatD [doc (showString "do"), prt 0 actionname, prt 0 args])
    SubCall subroutinename args -> prPrec i 0 (concatD [doc (showString "call"), prt 0 subroutinename, prt 0 args])

instance Print Args where
  prt i e = case e of
    MkArgs exps -> prPrec i 0 (concatD [prt 10 exps])

instance Print Exp where
  prt i e = case e of
    EIfThenElse exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "|"), prt 2 exp2])
    EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "&"), prt 3 exp2])
    EXor exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "^"), prt 3 exp2])
    EEq exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "=="), prt 4 exp2])
    ENeq exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "!="), prt 4 exp2])
    ELt exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "<"), prt 4 exp2])
    EGt exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString ">"), prt 4 exp2])
    ELte exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString "<="), prt 4 exp2])
    EGte exp1 exp2 -> prPrec i 3 (concatD [prt 4 exp1, doc (showString ">="), prt 4 exp2])
    EPlus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "+"), prt 5 exp2])
    EMinus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "-"), prt 5 exp2])
    ETimes exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "*"), prt 6 exp2])
    EDiv exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "/"), prt 6 exp2])
    EMod exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "%"), prt 6 exp2])
    EShiftL exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "<<"), prt 7 exp2])
    EShiftR exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString ">>"), prt 7 exp2])
    EArithShiftR exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "|>>"), prt 7 exp2])
    ENot exp -> prPrec i 7 (concatD [doc (showString "~"), prt 7 exp])
    ECall call -> prPrec i 8 (concatD [prt 0 call])
    EApp exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, prt 10 exp2])
    EVar varname -> prPrec i 10 (concatD [prt 0 varname])
    EIntLit n -> prPrec i 10 (concatD [prt 0 n])
    EBlob str -> prPrec i 10 (concatD [prt 0 str])
    EField exp fieldname -> prPrec i 10 (concatD [prt 10 exp, doc (showString "-->"), prt 0 fieldname])
    ETupleZero -> prPrec i 10 (concatD [doc (showString "()")])
    ETupleTwoPlus exp exps -> prPrec i 10 (concatD [doc (showString "("), prt 0 exp, doc (showString ","), prt 0 exps, doc (showString ")")])
    EProj exp n -> prPrec i 10 (concatD [prt 10 exp, doc (showString "."), prt 0 n])
    ETypeAnn exp type_ -> prPrec i 10 (concatD [doc (showString "("), prt 10 exp, doc (showString "::"), prt 0 type_, doc (showString ")")])
    EIgnore -> prPrec i 10 (concatD [doc (showString "_")])
  prtList 10 [] = (concatD [])
  prtList 10 (x:xs) = (concatD [prt 10 x, prt 10 xs])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

