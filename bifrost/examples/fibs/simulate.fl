// Test environment for the modules genenated from fib.prog and myadder.prog.

cload "ste.fl";

TYPE "word" 16;


let clockgate =
    bit_input clk.
    bit_input en.
    bit_output gated.
    bit_internal tmp.
    CELL "draw_hier clockgate" [
        re_ff clk en tmp,
        gated <- clk '&' tmp
    ];



cload (DIR^"myadder.prog.fl");
cload (DIR^"fib.prog.fl");
cload (DIR^"fibs.prog.fl");

let v = STE_debug (pexlif2fsm (fibs 'clk 'reset 'req 'ack 'o'sum));

let ant =
  let N = 100 in
    "clk" is_clock N
  and
    "reset" is 1 for 1 cycle otherwise 0 until N cycles
  and
    "req" is 0 for 6 cycles otherwise 1 until 7 cycles otherwise 0 until N cycles
;

STE "-e" v [] ant [] [];
let vis = get_current_vis ();
draw_set_time vis 0;
draw_set_time vis 0;
add_waveform vis ["req"];
add_waveform vis ["state[1:0]"];
add_waveform vis ["state[2:0]"];
add_waveform vis ["o'sum[15:0]"];

add_waveform vis ["a'fib1'req"];
add_waveform vis ["a'fib1'ack"];
add_waveform vis ["a'fib1'o'fibnum[15:0]"];

add_waveform vis ["a'fib2'req"];
add_waveform vis ["a'fib2'ack"];
add_waveform vis ["a'fib2'o'fibnum[15:0]"];
